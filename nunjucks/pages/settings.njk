<!-- {{ global_strings['settings']['slug'] }}.njk -->

{% set fileName = global_strings['settings']['slug'] + '.html' %}
{% set pageTitle = global_strings['settings']['title'] %}
{% set pageDescrip = global_strings['settings']['description'] %}

{% extends "boilerplate.njk" %}

{% block content %}
        
        {% include "partials/_navigation.njk" %}
        
        {% set heroTitle = pageTitle %}
        {% set heroDescrip = pageDescrip %}
        {% set heroBgClass = global_strings['settings']['background'] %}
        {% set heroBorderClass = global_strings['settings']['border'] %}
        {% include "partials/_hero.njk" %}

        {% include "partials/settings/_settings_generator.njk" %}

        {% include "partials/_footer.njk" %}

{% endblock %}


{% block javascript %}
        
    <!-- OBE:BS4 Library Bundles JS -->
    <script src="js/obebs4.production.bundle.js"></script>
    
    <script>
        
        $(function() {
            
            $( ".js-increment-down" ).on( "click", function() {
                var input = $(this).parents('.form-group').find('input');
                var currentVal = $(input).val();
                var units = $(input).data('units');
                var max = Number($(input).data('max'));
                var min = Number($(input).data('min'));
                var number = Number(currentVal.replace(/\D+/g, ''));
                var finalNumb = number;
                if (number > min && number <= max) {
                    finalNumb--;
                } else if (number <= min) {
                    finalNumb = min;
                }
                $(input).val(finalNumb + units);
            });

            $( ".js-increment-up" ).on( "click", function() {
                var input = $(this).parents('.form-group').find('input');
                var currentVal = $(input).val();
                var units = $(input).data('units');
                var max = Number($(input).data('max'));
                var min = Number($(input).data('min'));
                var number = Number(currentVal.replace(/\D+/g, ''));
                var finalNumb = number;
                if (number >= min && number < max) {
                    finalNumb++;
                } else if (number >= max) {
                    finalNumb = max;
                }
                $(input).val(finalNumb + units);
            });

            $( ".js-increment-target" ).on( "change", function() {
                var input = $(this);
                var currentVal = $(input).val();
                var units = $(input).data('units');
                var max = Number($(input).data('max'));
                var min = Number($(input).data('min'));
                var number = Number(currentVal.replace(/\D+/g, ''));
                var finalNumb = number;
                if (number >= max) {
                    finalNumb = max;
                } else if (number <= min) {
                    finalNumb = min;
                }
                $(input).val(finalNumb + units);
            });

            
            // script to toggle the OBE Condensed Font checkbox on/off depending on bootstrap vs google fonts selection
            $('#js-font-options a[data-toggle="tab"]').on('click', function () {
                var parent = $(this).parents('#js-font-options');
                if ($(this).attr('id') === 'bootstrap-tab') {
                    
                    $('#enable-obebs4-secondary-font').prop('checked', false);

                } else if ($(this).attr('id') === 'google-fonts-tab') {
                    
                    $('#enable-obebs4-secondary-font').prop('checked', true);

                }
            });
            
            // script to toggle the secondary brand font input visibility based on the associated checkbox
            $('#enable-obebs4-secondary-font').on('click', function () {
                if ($(this).prop('checked')) {
                    $('#google-font-family-secondary').parent('.form-group').collapse('show');
                } else {
                    $('#google-font-family-secondary').parent('.form-group').collapse('hide');
                }
            });

            // global array of font weight options for utility functions
            var weightOptions = ['100', '100i', '200', '200i', '300', '300i', '400', '400i', '500', '500i', '600', '600i', '700', '700i', '800', '800i', '900', '900i'];
            
            // utility function to add all selected goog font weight details to the output object
            function updateFontWeights(string, fontTypePartial, obj) {
                var weights = string.split(':')[1];
                var weightsArray = weights.split(',');
                for (var x = 0; x < weightsArray.length; x++) {
                    for (var y = 0; y < weightOptions.length; y++) {
                        if (String(weightsArray[x]) == String(weightOptions[y])) {
                            obj[fontTypePartial + '-font-weight-' + weightOptions[y]] = "true";
                        }
                    }
                }
            }

            // utility function to mark all of a font types weights as false
            function outputFalseFontWeights(fontTypePartial, obj) {
                for (var z = 0; z < weightOptions.length; z++) {
                    obj[fontTypePartial + '-font-weight-' + weightOptions[z]] = "false";
                }
            }

            // utility functions to append any link hover decoration color to the hover decoration value
            let concat_link_hover_decoration_val = function () {
                
                // collect data from selects
                let decoration = $('#link-hover-decoration-type').val();
                let color = $('#link-hover-decoration-color').val();
                let tintShade = $('#link-hover-decoration-color-modifier').val();
                
                // make all select elements not disabled
                $('#link-hover-decoration-type, #link-hover-decoration-color, #link-hover-decoration-color-modifier').attr('disabled', false);
                
                // initialize the final output var
                let output;
                
                if (decoration === 'none') {
                    $('#link-hover-decoration-color, #link-hover-decoration-color-modifier').find('option').attr('selected', false);
                    $('#link-hover-decoration-color, #link-hover-decoration-color-modifier').find('option[value="none"]').attr('selected', true);
                    $('#link-hover-decoration-color, #link-hover-decoration-color-modifier').attr('disabled', true);
                    output = decoration;
                    //$('#link-hover-decoration').siblings('.collapse').collapse('hide');
                } else {
                    //$('#link-hover-decoration').siblings('.collapse').collapse('show');
                    if (color === 'none') {
                        $('#link-hover-decoration-color-modifier').find('option').attr('selected', false);
                        $('#link-hover-decoration-color-modifier').find('option[value="none"]').attr('selected', true);
                        $('#link-hover-decoration-color-modifier').attr('disabled', true);
                        output = decoration;
                    } else {
                        if (tintShade === 'none') {
                            output = decoration + ' ' + color;
                        } else {
                            output = decoration + ' ' + color + '-' + tintShade;
                        }
                        
                    }
                    
                }
                $('#link-hover-decoration').val(output);

            };
            $('#link-hover-decoration-type, #link-hover-decoration-color, #link-hover-decoration-color-modifier').on('change', function () {
                concat_link_hover_decoration_val();
            });
            concat_link_hover_decoration_val();

            // utility functions to append any link decoration color to the decoration value
            let concat_link_decoration_val = function () {
                
                // collect data from selects
                let decoration = $('#link-decoration-type').val();
                let color = $('#link-decoration-color').val();
                let tintShade = $('#link-decoration-color-modifier').val();
                
                // make all select elements not disabled
                $('#link-decoration-type, #link-decoration-color, #link-decoration-color-modifier').attr('disabled', false);
                
                // initialize the final output var
                let output;
                
                if (decoration === 'none') {
                    $('#link-decoration-color, #link-decoration-color-modifier').find('option').attr('selected', false);
                    $('#link-decoration-color, #link-decoration-color-modifier').find('option[value="none"]').attr('selected', true);
                    $('#link-decoration-color, #link-decoration-color-modifier').attr('disabled', true);
                    output = decoration;
                    //$('#link-decoration').siblings('.collapse').collapse('hide');
                } else {
                    //$('#link-decoration').siblings('.collapse').collapse('show');
                    if (color === 'none') {
                        $('#link-decoration-color-modifier').find('option').attr('selected', false);
                        $('#link-decoration-color-modifier').find('option[value="none"]').attr('selected', true);
                        $('#link-decoration-color-modifier').attr('disabled', true);
                        output = decoration;
                    } else {
                        if (tintShade === 'none') {
                            output = decoration + ' ' + color;
                        } else {
                            output = decoration + ' ' + color + '-' + tintShade;
                        }
                        
                    }
                    
                }
                $('#link-decoration').val(output);

            };
            $('#link-decoration-type, #link-decoration-color, #link-decoration-color-modifier').on('change', function () {
                concat_link_decoration_val();
            });
            concat_link_decoration_val();



            // SCRIPT TO HIDE PRISM.JS JSON SECTION IF CURRENTLY SHOWING
            // AND A USER CLICKS ANY FORM ELEMENTS
            $('.form-group, .form-check, #js-font-options .nav-item').on('click', function () {
                
                if ($('#js-json-target').hasClass('js-json-is-visible')) {
                    $('#js-json-target').collapse('hide');
                }
                
                /*
                if ($('#template-url').hasClass('js-json-is-visible')) {
                    $('#template-url').collapse('hide');
                }
                */

            });




            // process form data script and validation
            $('#get-json-btn').on( "click", function() {

                var object = {};

                var color_50 = $('#color-50-lighten-percent').val();
                var color_100 = $('#color-100-lighten-percent').val();
                var color_200 = $('#color-200-lighten-percent').val();
                var color_300 = $('#color-300-lighten-percent').val();
                var color_400 = $('#color-400-lighten-percent').val();
                var color_600 = $('#color-600-darken-percent').val();
                var color_700 = $('#color-700-darken-percent').val();
                var color_800 = $('#color-800-darken-percent').val();
                var color_900 = $('#color-900-darken-percent').val();


                // handle Boostrap options

                object['enable-caret'] = $('#enable-caret').is(':checked') ? "true" : "false";
                object['enable-rounded'] = $('#enable-rounded').is(':checked') ? "true" : "false";
                object['enable-shadows'] = $('#enable-shadows').is(':checked') ? "true" : "false";
                object['enable-gradients'] = $('#enable-gradients').is(':checked') ? "true" : "false";
                object['enable-transitions'] = $('#enable-transitions').is(':checked') ? "true" : "false";
                object['enable-prefers-reduced-motion-media-query'] = $('#enable-prefers-reduced-motion-media-query').is(':checked') ? "true" : "false";
                object['enable-grid-classes'] = $('#enable-grid-classes').is(':checked') ? "true" : "false";
                object['enable-pointer-cursor-for-buttons'] = $('#enable-pointer-cursor-for-buttons').is(':checked') ? "true" : "false";
                object['enable-print-styles'] = $('#enable-print-styles').is(':checked') ? "true" : "false";
                object['enable-responsive-font-sizes'] = $('#enable-responsive-font-sizes').is(':checked') ? "true" : "false";
                object['enable-validation-icons'] = $('#enable-validation-icons').is(':checked') ? "true" : "false";
                object['enable-deprecation-messages'] = $('#enable-deprecation-messages').is(':checked') ? "true" : "false";

                // handle OBE options

                object['enable-obebs4-alert-wheel-colors'] = $('#enable-obebs4-alert-wheel-colors').is(':checked') ? "true" : "false";

                object['enable-obebs4-alert-variations'] = $('#enable-obebs4-alert-variations').is(':checked') ? "true" : "false";

                object['enable-obebs4-background-wheel-colors'] = $('#enable-obebs4-background-wheel-colors').is(':checked') ? "true" : "false";

                object['enable-obebs4-background-tints-shades'] = $('#enable-obebs4-background-tints-shades').is(':checked') ? "true" : "false";

                object['enable-obebs4-1-color-gradients'] = $('#enable-obebs4-1-color-gradients').is(':checked') ? "true" : "false";






                object['enable-obebs4-2-color-gradients'] = $('#enable-obebs4-2-color-gradients').is(':checked') ? "true" : "false";

                object['enable-obebs4-3-color-gradients'] = $('#enable-obebs4-3-color-gradients').is(':checked') ? "true" : "false";

                object['enable-obebs4-badge-wheel-colors'] = $('#enable-obebs4-badge-wheel-colors').is(':checked') ? "true" : "false";

                object['enable-obebs4-border-wheel-colors'] = $('#enable-obebs4-border-wheel-colors').is(':checked') ? "true" : "false";

                object['enable-obebs4-border-tints-shades'] = $('#enable-obebs4-border-tints-shades').is(':checked') ? "true" : "false";

                object['enable-obebs4-border-widths'] = $('#enable-obebs4-border-widths').is(':checked') ? "true" : "false";

                object['enable-obebs4-button-wheel-colors'] = $('#enable-obebs4-button-wheel-colors').is(':checked') ? "true" : "false";

                object['enable-obebs4-button-sizes'] = $('#enable-obebs4-button-sizes').is(':checked') ? "true" : "false";

                object['enable-obebs4-dropdowns'] = $('#enable-obebs4-dropdowns').is(':checked') ? "true" : "false";

                object['enable-obebs4-element-sizes'] = $('#enable-obebs4-element-sizes').is(':checked') ? "true" : "false";

                object['enable-obebs4-lists'] = $('#enable-obebs4-lists').is(':checked') ? "true" : "false";

                object['enable-obebs4-list-groups'] = $('#enable-obebs4-list-groups').is(':checked') ? "true" : "false";

                object['enable-obebs4-box-shadows'] = $('#enable-obebs4-box-shadows').is(':checked') ? "true" : "false";

                object['enable-obebs4-text-shadows'] = $('#enable-obebs4-text-shadows').is(':checked') ? "true" : "false";

                object['enable-obebs4-tables'] = $('#enable-obebs4-tables').is(':checked') ? "true" : "false";

                object['enable-obebs4-text-wheel-colors'] = $('#enable-obebs4-text-wheel-colors').is(':checked') ? "true" : "false";

                object['enable-obebs4-text-tints-shades'] = $('#enable-obebs4-text-tints-shades').is(':checked') ? "true" : "false";

                object['enable-obebs4-text-sizes'] = $('#enable-obebs4-text-sizes').is(':checked') ? "true" : "false";

                object['enable-obebs4-tooltips'] = $('#enable-obebs4-tooltips').is(':checked') ? "true" : "false";

                object['enable-obebs4-form-element-wheel-colors'] = $('#enable-obebs4-form-element-wheel-colors').is(':checked') ? "true" : "false";

                object['enable-obebs4-popovers'] = $('#enable-obebs4-popovers').is(':checked') ? "true" : "false";

                
                
                
                
                object['enable-obebs4-responsive-headlines'] = $('#enable-obebs4-responsive-headlines').is(':checked') ? "true" : "false";

                object['enable-obebs4-modal-utilities'] = $('#enable-obebs4-modal-utilities').is(':checked') ? "true" : "false";

                object['enable-obebs4-material-design-forms'] = $('#enable-obebs4-material-design-forms').is(':checked') ? "true" : "false";

                object['enable-obebs4-opacity'] = $('#enable-obebs4-opacity').is(':checked') ? "true" : "false";

                object['enable-obebs4-custom-dropdown-selects'] = $('#enable-obebs4-custom-dropdown-selects').is(':checked') ? "true" : "false";

                object['enable-obebs4-fab-buttons'] = $('#enable-obebs4-fab-buttons').is(':checked') ? "true" : "false";

                object['enable-obebs4-fa5-icon-checkboxes'] = $('#enable-obebs4-fa5-icon-checkboxes').is(':checked') ? "true" : "false";

                object['enable-obebs4-off-canvas-nav-modals'] = $('#enable-obebs4-off-canvas-nav-modals').is(':checked') ? "true" : "false";

                object['enable-obebs4-spacing-utilities'] = $('#enable-obebs4-spacing-utilities').is(':checked') ? "true" : "false";

                object['enable-obebs4-datepicker-component'] = $('#enable-obebs4-datepicker-component').is(':checked') ? "true" : "false";

                object['enable-obebs4-toggle-text-mini-plugin'] = $('#enable-obebs4-toggle-text-mini-plugin').is(':checked') ? "true" : "false";
                

                
                
                
                
                
                
                let setObjPercentage = function (obj, string, fallbackVal) {
                    let element = document.getElementById(string);
                    let value = element.value;
                    if (value.length > 1) {
                        object[string] = value;
                    } else {
                        object[string] = fallbackVal;
                    }
                };

                setObjPercentage(object, 'obebs4-1-color-tint-value', '5%');
                setObjPercentage(object, 'obebs4-1-color-shade-value', '10%');

                setObjPercentage(object, 'color-50-lighten-percent', '30%');
                setObjPercentage(object, 'color-100-lighten-percent', '20%');
                setObjPercentage(object, 'color-200-lighten-percent', '15%');
                setObjPercentage(object, 'color-300-lighten-percent', '10%');
                setObjPercentage(object, 'color-400-lighten-percent', '5%');
                setObjPercentage(object, 'color-600-darken-percent', '5%');
                setObjPercentage(object, 'color-700-darken-percent', '10%');
                setObjPercentage(object, 'color-800-darken-percent', '15%');
                setObjPercentage(object, 'color-900-darken-percent', '20%');


                



                


                var cleanFontFamCSS = function(element){
                    var input = $(element);
                    var currentVal = $(input).val();
                    var cleanedVal = currentVal.replace(';', '').replace('font-family: ', '').replace('"', '\"');
                    return cleanedVal;
                }
                
                var cleanGoogleFontURL = function(element){
                    var input = $(element);
                    var currentVal = $(input).val();
                    var parent = document.createElement('div');
                    parent.innerHTML = currentVal;
                    var dataNode = parent.childNodes[0];
                    var href = dataNode.href;
                    var cleanedVal = href.replace('https://', '').replace(/\./g, '___').replace(/:/g, '---').replace('?', 'qqq');
                    // var cleanedVal = currentVal.replace('https://', '').replace('<link href="', '').replace('" rel="stylesheet">', '').replace(/\./g, '___').replace(/:/g, '---').replace('?', 'qqq');
                    return cleanedVal;
                }
                
                if ($('#bootstrap-tab').hasClass('active')) {
                    
                    object['enable-bootstrap-default-fonts'] = "true";
                    object['enable-google-fonts'] = "false";

                    object['google-fonts-url'] = "false";

                    object['font-family-sans-serif'] = cleanFontFamCSS('#bootstrap-font-family-sans-serif');
                    object['font-family-monospace'] = cleanFontFamCSS('#bootstrap-font-family-monospace');

                    object['enable-obebs4-secondary-font'] = "false";
                    object['font-family-secondary'] = "false";

                    // assign default font weights to the output object
                    // and make all font weights false by default
                    for (var xx = 0; xx < weightOptions.length; xx++) {
                        object['primary-font-weight-' + weightOptions[xx]] = "false";
                        object['monospace-font-weight-' + weightOptions[xx]] = "false";
                        object['secondary-font-weight-' + weightOptions[xx]] = "false";
                    }

                } else if ($('#google-fonts-tab').hasClass('active')) {
                    
                    object['enable-bootstrap-default-fonts'] = "false";
                    object['enable-google-fonts'] = "true";

                    object['google-fonts-url'] = cleanGoogleFontURL('#google-fonts-url');

                    object['font-family-sans-serif'] = cleanFontFamCSS('#google-font-family-sans-serif');
                    object['font-family-monospace'] = cleanFontFamCSS('#google-font-family-monospace');

                    if ($('#enable-obebs4-secondary-font').is(':checked')) {
                        object['enable-obebs4-secondary-font'] = "true";
                        object['font-family-secondary'] = cleanFontFamCSS('#google-font-family-secondary');
                    } else {
                        object['enable-obebs4-secondary-font'] = "false";
                        object['font-family-secondary'] = "false";
                    }

                    // assign default font weights to the output object
                    // and make all font weights false by default
                    for (var xx = 0; xx < weightOptions.length; xx++) {
                        object['primary-font-weight-' + weightOptions[xx]] = "false";
                        object['monospace-font-weight-' + weightOptions[xx]] = "false";
                        object['secondary-font-weight-' + weightOptions[xx]] = "false";
                    }

                    // get the google fonts embed string
                    var gfEmbed = $('#google-fonts-url').val();
                    // clean the string for processing
                    var gfClean = gfEmbed.replace('<link href="', '').replace('https://fonts.googleapis.com/css?family=', '').replace('" rel="stylesheet">', '');
                    // create an array of the font strings
                    var fonts = gfClean.split('|');
                    // create a new cleaned array from the array of font strings
                    var cleanFonts = [];
                    for (var j = 0; j < fonts.length; j++) {
                        cleanFonts.push(fonts[j].replace(/\+/g,' '));
                    }
                    //console.log(cleanFonts);
                    //console.log('cleanFonts length: ' + cleanFonts.length);
                    
                    // get the each font CSS declaration value
                    var gfP = $('#google-font-family-sans-serif').val();
                    var gfPrimary = gfP.substring(gfP.indexOf("'") + 1, gfP.lastIndexOf("'"));
                    var gfM = $('#google-font-family-monospace').val();
                    var gfMonospace = gfM.substring(gfM.indexOf("'") + 1, gfM.lastIndexOf("'"));
                    var gfS = $('#google-font-family-secondary').val();
                    var gfSecondary = gfS.substring(gfS.indexOf("'") + 1, gfS.lastIndexOf("'"));

                    //console.log('gfPrimary: ' + gfPrimary);
                    //console.log('gfMonospace: ' + gfMonospace);
                    //console.log('gfSecondary: ' + gfSecondary);

                    function getFontType (fontString) {
                        if (gfPrimary === fontString) {
                            return 'primary';
                        } else if (gfMonospace === fontString) {
                            return 'monospace';
                        } else if (gfSecondary === fontString) {
                            return 'secondary';
                        }
                    }

                    // loop through cleaned array font strings
                    for (var k = 0; k < cleanFonts.length; k++) {
                        
                        // if clean font string has a colon
                        if (cleanFonts[k].indexOf(':') !== -1) {
                            
                            // extract the font name
                            var fontName = cleanFonts[k].substr(0, cleanFonts[k].indexOf(':'));
                            
                            var type = getFontType(fontName);

                            if (type === 'primary') {
                                updateFontWeights(cleanFonts[k], 'primary', object);
                            } else if (type === 'monospace') {
                                updateFontWeights(cleanFonts[k], 'monospace', object);
                            } else if (type === 'secondary') {
                                updateFontWeights(cleanFonts[k], 'secondary', object);
                            }

                        } // END if

                    } // END for loop

                } // END if/else for selected fonts tab




                var setColorVariants = function (colorString) {
                    var value = $('#' + colorString).val();
                    object[colorString] = value;
                    object[colorString + '-50'] = 'lighten($' + colorString + ', ' + color_50 + ')';
                    object[colorString + '-100'] = 'lighten($' + colorString + ', ' + color_100 + ')';
                    object[colorString + '-200'] = 'lighten($' + colorString + ', ' + color_200 + ')';
                    object[colorString + '-300'] = 'lighten($' + colorString + ', ' + color_300 + ')';
                    object[colorString + '-400'] = 'lighten($' + colorString + ', ' + color_400 + ')';
                    object[colorString + '-500'] = '$' + colorString;
                    object[colorString + '-600'] = 'darken($' + colorString + ', ' + color_600 + ')';
                    object[colorString + '-700'] = 'darken($' + colorString + ', ' + color_700 + ')';
                    object[colorString + '-800'] = 'darken($' + colorString + ', ' + color_800 + ')';
                    object[colorString + '-900'] = 'darken($' + colorString + ', ' + color_900 + ')';
                }



                if ($('#white').val().length > 1) {
                    setColorVariants('white');
                }
                if ($('#light-gray').val().length > 1) {
                    setColorVariants('light-gray');
                }
                if ($('#gray').val().length > 1) {
                    setColorVariants('gray');
                }
                if ($('#dark-gray').val().length > 1) {
                    setColorVariants('dark-gray');
                }
                if ($('#black').val().length > 1) {
                    setColorVariants('black');
                }
                if ($('#red').val().length > 1) {
                    setColorVariants('red');
                }
                if ($('#rose').val().length > 1) {
                    setColorVariants('rose');
                }
                if ($('#magenta').val().length > 1) {
                    setColorVariants('magenta');
                }
                if ($('#violet').val().length > 1) {
                    setColorVariants('violet');
                }
                if ($('#blue').val().length > 1) {
                    setColorVariants('blue');
                }
                if ($('#azure').val().length > 1) {
                    setColorVariants('azure');
                }
                if ($('#cyan').val().length > 1) {
                    setColorVariants('cyan');
                }
                if ($('#spring-green').val().length > 1) {
                    setColorVariants('spring-green');
                }
                if ($('#green').val().length > 1) {
                    setColorVariants('green');
                }
                if ($('#chartreuse').val().length > 1) {
                    setColorVariants('chartreuse');
                }
                if ($('#yellow').val().length > 1) {
                    setColorVariants('yellow');
                }
                if ($('#orange').val().length > 1) {
                    setColorVariants('orange');
                }
                if ($('#orange-gray').val().length > 1) {
                    setColorVariants('orange-gray');
                }
                if ($('#dark-gray-orange').val().length > 1) {
                    setColorVariants('dark-gray-orange');
                }
                if ($('#blue-gray').val().length > 1) {
                    setColorVariants('blue-gray');
                }
                if ($('#light-gray-azure').val().length > 1) {
                    setColorVariants('light-gray-azure');
                }




                var setColorsData = function (idString) {
                    var value = $('#' + idString).val();
                    var value_mod = $('#' + idString + '-modifier').val();
                    if (value_mod === 'none') {
                        object[idString] = '$' + value;
                    } else {
                        object[idString] = '$' + value + '-' + value_mod;
                    }   
                }

                var setLinkDecorationData = function (idString) {
                    var value = $('#' + idString).val();
                    object[idString] = value;  
                }
                
                
                setColorsData('primary');
                setColorsData('secondary');
                setColorsData('success');
                setColorsData('info');
                setColorsData('warning');
                setColorsData('danger');
                setColorsData('light');
                setColorsData('dark');

                setColorsData('body-bg');
                setColorsData('body-color');

                setColorsData('link-color');
                setLinkDecorationData('link-decoration');
                setLinkDecorationData('link-hover-decoration');

                setColorsData('mark-bg');

                setColorsData('input-bg');
                setColorsData('input-color');
                setColorsData('input-placeholder-color');
                setColorsData('input-disabled-bg');

                setColorsData('input-group-addon-bg');
                setColorsData('input-group-addon-color');
                
                setColorsData('component-active-bg');
                setColorsData('component-active-color');

                setColorsData('dropdown-header-color');
                setColorsData('dropdown-link-color');
                setColorsData('dropdown-link-hover-bg');
                setColorsData('dropdown-link-disabled-color');
                
                //console.log(object);
                
                






                //
                // STRINGIFY OBJECT INTO JSON AND USE PRISM TO DISPLAY AS HIGHLIGHTED CODE
                //

                $('#js-json-target pre').remove();
                
                var target = document.getElementById('js-json-target');

                var pre = document.createElement('pre');
                var code = document.createElement('code');
                    code.className = 'language-json line-numbers';
                var json = JSON.stringify(object, null, 4);
                var textnode = document.createTextNode(json);

                code.appendChild(textnode);
                pre.appendChild(code);
                target.appendChild(pre);


                //
                // GENERATE TEMPLATE (URL) SCRIPTS
                //

                function get_checkbox_val(idSelector) {
                    if ($(idSelector).is(':checked')) {
                        return 1;
                    } else {
                        return 0;
                    }
                }

                function get_color_val(idSelector) {
                    //return $(idSelector).val().replace('#', '%23');
                    return $(idSelector).val().replace('#', '');
                }

                function get_percent_val(idSelector) {
                    //return $(idSelector).val().replace('%', '%25');
                    return $(idSelector).val().replace('%', '');
                }

                function get_tab_selection() {
                    if ($('#google-fonts').hasClass('active')) {
                        return 'google';
                    } else if ($('#bootstrap').hasClass('active')) {
                        return 'bootstrap';
                    }
                }

                /*
                var currentURL = window.location.href;
                var url;
                if (currentURL.indexOf('?') > -1) {
                    url = currentURL.substr(0, currentURL.indexOf('?'));
                } else {
                    url = currentURL;
                }
                //console.log(url);
                */

                /*
                var template = {};
                */
                
                /*
                // OBE Color Options
                template.a = get_checkbox_val('#enable-obebs4-alert-wheel-colors');
                template.b = get_checkbox_val('#enable-obebs4-alert-variations');
                template.c = get_checkbox_val('#enable-obebs4-background-wheel-colors');
                template.d = get_checkbox_val('#enable-obebs4-background-tints-shades');
                template.e = get_checkbox_val('#enable-obebs4-1-color-gradients');
                template.f = get_checkbox_val('#enable-obebs4-2-color-gradients');
                template.g = get_checkbox_val('#enable-obebs4-3-color-gradients');
                template.h = get_checkbox_val('#enable-obebs4-badge-wheel-colors');
                template.i = get_checkbox_val('#enable-obebs4-border-wheel-colors');
                template.j = get_checkbox_val('#enable-obebs4-border-tints-shades');
                template.k = get_checkbox_val('#enable-obebs4-button-wheel-colors');
                template.l = get_checkbox_val('#enable-obebs4-dropdowns');
                template.m = get_checkbox_val('#enable-obebs4-list-groups');
                template.n = get_checkbox_val('#enable-obebs4-tables');
                template.o = get_checkbox_val('#enable-obebs4-text-wheel-colors');
                template.p = get_checkbox_val('#enable-obebs4-text-tints-shades');
                template.q = get_checkbox_val('#enable-obebs4-tooltips');
                template.r = get_checkbox_val('#enable-obebs4-form-element-wheel-colors');
                template.s = get_checkbox_val('#enable-obebs4-popovers');
                
                // OBE Utility Options
                template.t = get_checkbox_val('#enable-obebs4-border-widths');
                template.u = get_checkbox_val('#enable-obebs4-button-sizes');
                template.v = get_checkbox_val('#enable-obebs4-element-sizes');
                template.w = get_checkbox_val('#enable-obebs4-lists');
                template.x = get_checkbox_val('#enable-obebs4-box-shadows');
                template.y = get_checkbox_val('#enable-obebs4-text-shadows');
                template.z = get_checkbox_val('#enable-obebs4-text-sizes');

                template.aa = get_checkbox_val('#enable-obebs4-responsive-headlines');
                template.bb = get_checkbox_val('#enable-obebs4-modal-utilities');
                template.cc = get_checkbox_val('#enable-obebs4-material-design-forms');
                template.dd = get_checkbox_val('#enable-obebs4-opacity');
                template.ee = get_checkbox_val('#enable-obebs4-custom-dropdown-selects');
                template.ff = get_checkbox_val('#enable-obebs4-fab-buttons');
                template.gg = get_checkbox_val('#enable-obebs4-fa5-icon-checkboxes');
                template.hh = get_checkbox_val('#enable-obebs4-off-canvas-nav-modals');
                template.ii = get_checkbox_val('#enable-obebs4-spacing-utilities');
                template.jj = get_checkbox_val('#enable-obebs4-datepicker-component');
                template.kk = get_checkbox_val('#enable-obebs4-toggle-text-mini-plugin');

                // OBE Color Wheel Colors
                template.whi = get_color_val('#white');
                template.liG = get_color_val('#light-gray');
                template.gra = get_color_val('#gray');
                template.daG = get_color_val('#dark-gray');
                template.bla = get_color_val('#black');
                template.red = get_color_val('#red');
                template.ros = get_color_val('#rose');
                template.mag = get_color_val('#magenta');
                template.vio = get_color_val('#violet');
                template.blu = get_color_val('#blue');
                template.azu = get_color_val('#azure');
                template.cya = get_color_val('#cyan');
                template.spG = get_color_val('#spring-green');
                template.gre = get_color_val('#green');
                template.cha = get_color_val('#chartreuse');
                template.yel = get_color_val('#yellow');
                template.ora = get_color_val('#orange');
                template.orG = get_color_val('#orange-gray');
                template.dGO = get_color_val('#dark-gray-orange');
                template.blG = get_color_val('#blue-gray');
                template.lGA = get_color_val('#light-gray-azure');

                // OBE Single Color Gradient Percentages
                template.tin = get_percent_val('#obebs4-1-color-tint-value');
                template.sha = get_percent_val('#obebs4-1-color-shade-value');

                // OBE Single Color Tint/Shade Percentages
                template.c50 = get_percent_val('#color-50-lighten-percent');
                template.c100 = get_percent_val('#color-100-lighten-percent');
                template.c200 = get_percent_val('#color-200-lighten-percent');
                template.c300 = get_percent_val('#color-300-lighten-percent');
                template.c400 = get_percent_val('#color-400-lighten-percent');
                template.c600 = get_percent_val('#color-600-darken-percent');
                template.c700 = get_percent_val('#color-700-darken-percent');
                template.c800 = get_percent_val('#color-800-darken-percent');
                template.c900 = get_percent_val('#color-900-darken-percent');

                // OBE Font Options
                template.fonts = get_tab_selection();
                
                // OBE Google Fonts Data
                template.gf = encodeURI($('#google-fonts-url').val().replace(/=/g, '__'));
                template.gfp = encodeURI($('#google-font-family-sans-serif').val());
                template.gfm = encodeURI($('#google-font-family-monospace').val());
                template.gfsCheck = get_checkbox_val('#enable-obebs4-secondary-font');
                template.gfs = encodeURI($('#google-font-family-secondary').val());

                // OBE Contextual Color Assignments
                template.pri = $('#primary').val();
                template.pri_ = $('#primary-modifier').val();
                template.sec = $('#secondary').val();
                template.sec_ = $('#secondary-modifier').val();
                template.suc = $('#success').val();
                template.suc_ = $('#success-modifier').val();
                template.inf = $('#info').val();
                template.inf_ = $('#info-modifier').val();
                template.war = $('#warning').val();
                template.war_ = $('#warning-modifier').val();
                template.dan = $('#danger').val();
                template.dan_ = $('#danger-modifier').val();
                template.lig = $('#light').val();
                template.lig_ = $('#light-modifier').val();
                template.dar = $('#dark').val();
                template.dar_ = $('#dark-modifier').val();

                // OBE Additional Color Assignments
                template.a0 = $('#body-bg').val();
                template.a0_ = $('#body-bg-modifier').val();
                template.a1 = $('#body-color').val();
                template.a1_ = $('#body-color-modifier').val();

                template.b0 = $('#link-color').val();
                template.b0_ = $('#link-color-modifier').val();
                template.b1 = $('#link-decoration').val();
                template.b2 = $('#link-decoration-color').val();
                template.b2_ = $('#link-decoration-color-modifier').val();
                template.b3 = $('#link-hover-decoration').val();
                template.b4 = $('#link-decoration-color').val();
                template.b4_ = $('#link-decoration-color-modifier').val();

                template.c0 = $('#mark-bg').val();
                template.c0_ = $('#mark-bg-modifier').val();

                template.d0 = $('#input-bg').val();
                template.d0_ = $('#input-bg-modifier').val();
                template.d1 = $('#input-color').val();
                template.d1_ = $('#input-color-modifier').val();
                template.d2 = $('#input-placeholder-color').val();
                template.d2_ = $('#input-placeholder-color-modifier').val();
                template.d3 = $('#input-disabled-bg').val();
                template.d3_ = $('#input-disabled-bg-modifier').val();

                template.e0 = $('#input-group-addon-bg').val();
                template.e0_ = $('#input-group-addon-bg-modifier').val();
                template.e1 = $('#input-group-addon-color').val();
                template.e1_ = $('#input-group-addon-color-modifier').val();

                template.f0 = $('#component-active-bg').val();
                template.f0_ = $('#component-active-bg-modifier').val();
                template.f1 = $('#component-active-color').val();
                template.f1_ = $('#component-active-color-modifier').val();
                
                template.g0 = $('#dropdown-header-color').val();
                template.g0_ = $('#dropdown-header-color-modifier').val();
                template.g1 = $('#dropdown-link-color').val();
                template.g1_ = $('#dropdown-link-color-modifier').val();
                template.g2 = $('#dropdown-link-hover-bg').val();
                template.g2_ = $('#dropdown-link-hover-bg-modifier').val();
                template.g3 = $('#dropdown-link-disabled-color').val();
                template.g3_ = $('#dropdown-link-disabled-color-modifier').val();
                */




                

                
                

                //console.log(template);

                var generateTemplateURL = function (urlBase, templateObj) {
                    var output = urlBase + '?';
                    for (var key in templateObj) {
                        if (templateObj.hasOwnProperty(key)) {
                            output += key + '=' + templateObj[key] + '&';
                        }
                    }
                    return output.replace(/.$/, "");
                }

                //
                // STRINGIFY OBJECT INTO JSON AND USE PRISM TO DISPLAY AS HIGHLIGHTED CODE
                //

                /*
                $('#template-url pre').remove();
                
                var target2 = document.getElementById('template-url');

                var pre2 = document.createElement('pre');
                var code2 = document.createElement('code');
                    code2.className = 'language-markup line-numbers';
                var leURL = generateTemplateURL(url, template);
                var textnode2 = document.createTextNode(leURL);

                code2.appendChild(textnode2);
                pre2.appendChild(code2);
                target2.appendChild(pre2);
                */

                //$('#template-url-test').text(generateTemplateURL(url, template));

                Prism.highlightAll();

                // add class name to target element to use as a selector to hide the code output
                // when a user clicks on any setting elements after generating a JSON output
                $(target).addClass('js-json-is-visible').collapse('show');
                /*
                $(target2).addClass('js-json-is-visible').collapse('show');
                */

            });





            
            



            // 
            // GET URL DATA AND APPLY TO PAGE
            //
            
            function get_URL_var(variable) {
                var query = window.location.search.substring(1);
                var vars = query.split("&");
                for (var i=0;i<vars.length;i++) {
                    var pair = vars[i].split("=");
                    if(pair[0] == variable){return pair[1];}
                }
                return(false);
            }

            function set_checkbox(value, idSelector) {
                if (value === '1') {
                    $(idSelector).prop('checked', true);
                } else if (value === '0') {
                    $(idSelector).prop('checked', false);
                }
            }

            function set_input_val(idSelector, value) {
                $(idSelector).val(value);
            }
            
            function set_input_val_hash(idSelector, value) {
                $(idSelector).val('#' + value);
            }

            function set_input_val_percent(idSelector, value) {
                $(idSelector).val(value + '%');
            }

            function set_select_val(idSelector, value) {
                $(idSelector + " option[value='" + value + "']").attr("selected", true);
            }

            function set_link_decoration_inputs(str, decorSelectId, colorSelectId, modSelectId, targetId) {
                
                // decode passed str value and set assign to a variable
                let string = decodeURI(str);
                // write the string directly to the hidden input
                $(targetId).val(string);
                
                // array of different decoration type options
                let options = ['none', 'underline dotted', 'underline double', 'underline dashed', 'underline wavy', 'underline overline', 'underline', 'overline dotted', 'overline double', 'overline dashed', 'overline wavy', 'overline', 'line-through dotted', 'line-through double', 'line-through dashed', 'line-through wavy', 'line-through'];
                // array of color slugs (without any tint/shade modifiers)
                let colorSlugs = ['red', 'rose', 'magenta', 'violet', 'blue', 'azure', 'cyan', 'spring-green', 'green', 'chartreuse', 'yellow', 'orange', 'dark-gray-orange', 'dark-gray', 'gray', 'blue-gray', 'light-gray-azure', 'light-gray', 'black', 'orange-gray', 'white'];

                // deselect all select options
                $(decorSelectId, decorSelectId, colorSelectId).find('option').attr('selected', false);

                // loop through the array of possible select values
                for (var i = 0; i < options.length; i++) {
                    
                    // if the passed and decoded string is found in the array item
                    if (string.includes(options[i])) {
                        
                        if (options[i] === 'none') {
                            
                            // if 'none' is found then set all selects to none
                            $(decorSelectId, colorSelectId, modSelectId).find('option[value="none"]').attr('selected', true);
                            $(colorSelectId, modSelectId).attr('disabled', true);

                        } else {
                            
                            // if none is not found but the passed string contains a 0
                            if (string.includes('0')) {
                                
                                // get the good stuff
                                let str2 = string;
                                let colorString = str2.split(' ').pop();
                                let modifier = colorString.split("-").pop();
                                let color = colorString.replace('-' + modifier, '');
                                let decoration = string.replace(' ' + colorString, '');
                                // update the UI
                                $(decorSelectId).find('option[value="' + decoration + '"]').attr('selected', true);
                                $(colorSelectId).find('option[value="' + color + '"]').attr('selected', true);
                                $(modSelectId).find('option[value="' + modifier + '"]').attr('selected', true);

                            } else {
                                
                                let decoration = '';
                                let color = '';
                                
                                // since a color value may still exist (without any 0 chars), loop through colors array and extract the color value
                                for (var j = 0; j < colorSlugs.length; j++) {
                                    if (string.includes(colorSlugs[j])) {
                                        // get the good stuff
                                        let str2 = string;
                                        color = str2.split(' ').pop();
                                        // update the UI
                                        $(colorSelectId).find('option[value="' + color + '"]').attr('selected', true);
                                        $(modSelectId).find('option[value="none"]').attr('selected', true);
                                    }/* else {
                                        $(colorSelectId).find('option[value="none"]').attr('selected', true);
                                        $(modSelectId).attr('disabled', true);
                                    }*/
                                }

                                decoration = string.replace(color, '').trim();
                                
                                for (var k = 0; k < options.length; k++) {
                                    
                                    if (options[k] === decoration) {
                                        $(decorSelectId).find('option[value="' + decoration + '"]').attr('selected', true);
                                    }

                                }

                            }

                        }

                    }

                }

                let colorCheck = $(colorSelectId).val();
                
                if (colorCheck === 'none') {
                    $(modSelectId).attr('disabled', true);
                } else {
                    $(targetId).siblings('.collapse').collapse('show');
                }

            }


            /*
            // OBE Color Options
            if (get_URL_var('a').length > 0) {
                set_checkbox(get_URL_var('a'), '#enable-obebs4-alert-wheel-colors');
            }
            if (get_URL_var('b').length > 0) {
                set_checkbox(get_URL_var('b'), '#enable-obebs4-alert-variations');
            }
            if (get_URL_var('c').length > 0) {
                set_checkbox(get_URL_var('c'), '#enable-obebs4-background-wheel-colors');
            }
            if (get_URL_var('d').length > 0) {
                set_checkbox(get_URL_var('d'), '#enable-obebs4-background-tints-shades');
            }
            if (get_URL_var('e').length > 0) {
                set_checkbox(get_URL_var('e'), '#enable-obebs4-1-color-gradients');
            }
            if (get_URL_var('f').length > 0) {
                set_checkbox(get_URL_var('f'), '#enable-obebs4-2-color-gradients');
            }
            if (get_URL_var('g').length > 0) {
                set_checkbox(get_URL_var('g'), '#enable-obebs4-3-color-gradients');
            }
            if (get_URL_var('h').length > 0) {
                set_checkbox(get_URL_var('h'), '#enable-obebs4-badge-wheel-colors');
            }
            if (get_URL_var('i').length > 0) {
                set_checkbox(get_URL_var('i'), '#enable-obebs4-border-wheel-colors');
            }
            if (get_URL_var('j').length > 0) {
                set_checkbox(get_URL_var('j'), '#enable-obebs4-border-tints-shades');
            }
            if (get_URL_var('k').length > 0) {
                set_checkbox(get_URL_var('k'), '#enable-obebs4-button-wheel-colors');
            }
            if (get_URL_var('l').length > 0) {
                set_checkbox(get_URL_var('l'), '#enable-obebs4-dropdowns');
            }
            if (get_URL_var('m').length > 0) {
                set_checkbox(get_URL_var('m'), '#enable-obebs4-list-groups');
            }
            if (get_URL_var('n').length > 0) {
                set_checkbox(get_URL_var('n'), '#enable-obebs4-tables');
            }
            if (get_URL_var('o').length > 0) {
                set_checkbox(get_URL_var('o'), '#enable-obebs4-text-wheel-colors');
            }
            if (get_URL_var('p').length > 0) {
                set_checkbox(get_URL_var('p'), '#enable-obebs4-text-tints-shades');
            }
            if (get_URL_var('q').length > 0) {
                set_checkbox(get_URL_var('q'), '#enable-obebs4-tooltips');
            }
            if (get_URL_var('r').length > 0) {
                set_checkbox(get_URL_var('r'), '#enable-obebs4-form-element-wheel-colors');
            }
            if (get_URL_var('s').length > 0) {
                set_checkbox(get_URL_var('s'), '#enable-obebs4-popovers');
            }

            
            // OBE Utility Options
            if (get_URL_var('t').length > 0) {
                set_checkbox(get_URL_var('t'), '#enable-obebs4-border-widths');
            }
            if (get_URL_var('u').length > 0) {
                set_checkbox(get_URL_var('u'), '#enable-obebs4-button-sizes');
            }
            if (get_URL_var('v').length > 0) {
                set_checkbox(get_URL_var('v'), '#enable-obebs4-element-sizes');
            }
            if (get_URL_var('w').length > 0) {
                set_checkbox(get_URL_var('w'), '#enable-obebs4-lists');
            }
            if (get_URL_var('x').length > 0) {
                set_checkbox(get_URL_var('x'), '#enable-obebs4-box-shadows');
            }
            if (get_URL_var('y').length > 0) {
                set_checkbox(get_URL_var('y'), '#enable-obebs4-text-shadows');
            }
            if (get_URL_var('z').length > 0) {
                set_checkbox(get_URL_var('z'), '#enable-obebs4-text-sizes');
            }

            if (get_URL_var('aa').length > 0) {
                set_checkbox(get_URL_var('aa'), '#enable-obebs4-responsive-headlines');
            }
            if (get_URL_var('bb').length > 0) {
                set_checkbox(get_URL_var('bb'), '#enable-obebs4-modal-utilities');
            }
            if (get_URL_var('cc').length > 0) {
                set_checkbox(get_URL_var('cc'), '#enable-obebs4-material-design-forms');
            }
            if (get_URL_var('dd').length > 0) {
                set_checkbox(get_URL_var('dd'), '#enable-obebs4-opacity');
            }


            if (get_URL_var('ee').length > 0) {
                set_checkbox(get_URL_var('ee'), '#enable-obebs4-custom-dropdown-selects');
            }
            if (get_URL_var('ff').length > 0) {
                set_checkbox(get_URL_var('ff'), '#enable-obebs4-fab-buttons');
            }
            if (get_URL_var('gg').length > 0) {
                set_checkbox(get_URL_var('gg'), '#enable-obebs4-fa5-icon-checkboxes');
            }
            if (get_URL_var('hh').length > 0) {
                set_checkbox(get_URL_var('hh'), '#enable-obebs4-off-canvas-nav-modals');
            }
            if (get_URL_var('ii').length > 0) {
                set_checkbox(get_URL_var('ii'), '#enable-obebs4-spacing-utilities');
            }
            if (get_URL_var('jj').length > 0) {
                set_checkbox(get_URL_var('jj'), '#enable-obebs4-datepicker-component');
            }




            if (get_URL_var('kk').length > 0) {
                set_checkbox(get_URL_var('kk'), '#enable-obebs4-toggle-text-mini-plugin');
            }
            




            
            // OBE Color Wheel Colors
            if (get_URL_var('whi').length > 0) {
                set_input_val_hash('#white', decodeURIComponent(get_URL_var('whi')));
            }
            if (get_URL_var('liG').length > 0) {
                set_input_val_hash('#light-gray', decodeURIComponent(get_URL_var('liG')));
            }
            if (get_URL_var('gra').length > 0) {
                set_input_val_hash('#gray', decodeURIComponent(get_URL_var('gra')));
            }
            if (get_URL_var('daG').length > 0) {
                set_input_val_hash('#dark-gray', decodeURIComponent(get_URL_var('daG')));
            }
            if (get_URL_var('bla').length > 0) {
                set_input_val_hash('#black', decodeURIComponent(get_URL_var('bla')));
            }
            if (get_URL_var('red').length > 0) {
                set_input_val_hash('#red', decodeURIComponent(get_URL_var('red')));
            }
            if (get_URL_var('ros').length > 0) {
                set_input_val_hash('#rose', decodeURIComponent(get_URL_var('ros')));
            }
            if (get_URL_var('mag').length > 0) {
                set_input_val_hash('#magenta', decodeURIComponent(get_URL_var('mag')));
            }
            if (get_URL_var('vio').length > 0) {
                set_input_val_hash('#violet', decodeURIComponent(get_URL_var('vio')));
            }
            if (get_URL_var('blu').length > 0) {
                set_input_val_hash('#blue', decodeURIComponent(get_URL_var('blu')));
            }
            if (get_URL_var('azu').length > 0) {
                set_input_val_hash('#azure', decodeURIComponent(get_URL_var('azu')));
            }
            if (get_URL_var('cya').length > 0) {
                set_input_val_hash('#cyan', decodeURIComponent(get_URL_var('cya')));
            }
            if (get_URL_var('spG').length > 0) {
                set_input_val_hash('#spring-green', decodeURIComponent(get_URL_var('spG')));
            }
            if (get_URL_var('gre').length > 0) {
                set_input_val_hash('#green', decodeURIComponent(get_URL_var('gre')));
            }
            if (get_URL_var('cha').length > 0) {
                set_input_val_hash('#chartreuse', decodeURIComponent(get_URL_var('cha')));
            }
            if (get_URL_var('yel').length > 0) {
                set_input_val_hash('#yellow', decodeURIComponent(get_URL_var('yel')));
            }
            if (get_URL_var('ora').length > 0) {
                set_input_val_hash('#orange', decodeURIComponent(get_URL_var('ora')));
            }
            if (get_URL_var('orG').length > 0) {
                set_input_val_hash('#orange-gray', decodeURIComponent(get_URL_var('orG')));
            }
            if (get_URL_var('dGO').length > 0) {
                set_input_val_hash('#dark-gray-orange', decodeURIComponent(get_URL_var('dGO')));
            }
            if (get_URL_var('blG').length > 0) {
                set_input_val_hash('#blue-gray', decodeURIComponent(get_URL_var('blG')));
            }
            if (get_URL_var('lGA').length > 0) {
                set_input_val_hash('#light-gray-azure', decodeURIComponent(get_URL_var('lGA')));
            }


            // OBE Single Color Gradient Percentages
            if (get_URL_var('tin').length > 0) {
                set_input_val_percent('#obebs4-1-color-tint-value', decodeURIComponent(get_URL_var('tin')));
            }
            if (get_URL_var('sha').length > 0) {
                set_input_val_percent('#obebs4-1-color-shade-value', decodeURIComponent(get_URL_var('sha')));
            }


            // OBE Single Color Tint/Shade Percentages
            if (get_URL_var('c50').length > 0) {
                set_input_val_percent('#color-50-lighten-percent', decodeURIComponent(get_URL_var('c50')));
            }
            if (get_URL_var('c100').length > 0) {
                set_input_val_percent('#color-100-lighten-percent', decodeURIComponent(get_URL_var('c100')));
            }
            if (get_URL_var('c200').length > 0) {
                set_input_val_percent('#color-200-lighten-percent', decodeURIComponent(get_URL_var('c200')));
            }
            if (get_URL_var('c300').length > 0) {
                set_input_val_percent('#color-300-lighten-percent', decodeURIComponent(get_URL_var('c300')));
            }
            if (get_URL_var('c400').length > 0) {
                set_input_val_percent('#color-400-lighten-percent', decodeURIComponent(get_URL_var('c400')));
            }
            if (get_URL_var('c600').length > 0) {
                set_input_val_percent('#color-600-darken-percent', decodeURIComponent(get_URL_var('c600')));
            }
            if (get_URL_var('c700').length > 0) {
                set_input_val_percent('#color-700-darken-percent', decodeURIComponent(get_URL_var('c700')));
            }
            if (get_URL_var('c800').length > 0) {
                set_input_val_percent('#color-800-darken-percent', decodeURIComponent(get_URL_var('c800')));
            }
            if (get_URL_var('c900').length > 0) {
                set_input_val_percent('#color-900-darken-percent', decodeURIComponent(get_URL_var('c900')));
            }

            
            // OBE Font Options
            if (get_URL_var('fonts') === 'bootstrap') {
                $('#bootstrap-tab').tab('show');
            } else if (get_URL_var('fonts') === 'google') {
                $('#google-fonts-tab').tab('show');
            }


            
            // OBE Google Fonts Data
            if (get_URL_var('gf').length > 0) {
                set_input_val('#google-fonts-url', decodeURIComponent(get_URL_var('gf').replace(/__/g, '=')));
            }
            if (get_URL_var('gfp').length > 0) {
                set_input_val('#google-font-family-sans-serif', decodeURIComponent(get_URL_var('gfp')));
            }
            if (get_URL_var('gfm').length > 0) {
                set_input_val('#google-font-family-monospace', decodeURIComponent(get_URL_var('gfm')));
            }
            if (get_URL_var('gfsCheck').length > 0) {
                set_checkbox(get_URL_var('gfsCheck'), '#enable-obebs4-secondary-font');
            }
            if (get_URL_var('gfs').length > 0) {
                set_input_val('#google-font-family-secondary', decodeURIComponent(get_URL_var('gfs')));
            }


            // OBE Contextual Color Assignments
            if (get_URL_var('pri').length > 0) {
                set_select_val('#primary', get_URL_var('pri'));
            }
            if (get_URL_var('pri_').length > 0) {
                set_select_val('#primary-modifier', get_URL_var('pri_'));
            }
            if (get_URL_var('sec').length > 0) {
                set_select_val('#secondary', get_URL_var('sec'));
            }
            if (get_URL_var('sec_').length > 0) {
                set_select_val('#secondary-modifier', get_URL_var('sec_'));
            }
            if (get_URL_var('suc').length > 0) {
                set_select_val('#success', get_URL_var('suc'));
            }
            if (get_URL_var('suc_').length > 0) {
                set_select_val('#success-modifier', get_URL_var('suc_'));
            }
            if (get_URL_var('inf').length > 0) {
                set_select_val('#info', get_URL_var('inf'));
            }
            if (get_URL_var('inf_').length > 0) {
                set_select_val('#info-modifier', get_URL_var('inf_'));
            }
            if (get_URL_var('war').length > 0) {
                set_select_val('#warning', get_URL_var('war'));
            }
            if (get_URL_var('war_').length > 0) {
                set_select_val('#warning-modifier', get_URL_var('war_'));
            }
            if (get_URL_var('dan').length > 0) {
                set_select_val('#danger', get_URL_var('dan'));
            }
            if (get_URL_var('dan_').length > 0) {
                set_select_val('#danger-modifier', get_URL_var('dan_'));
            }
            if (get_URL_var('lig').length > 0) {
                set_select_val('#light', get_URL_var('lig'));
            }
            if (get_URL_var('lig_').length > 0) {
                set_select_val('#light-modifier', get_URL_var('lig_'));
            }
            if (get_URL_var('dar').length > 0) {
                set_select_val('#dark', get_URL_var('dar'));
            }
            if (get_URL_var('dar_').length > 0) {
                set_select_val('#dark-modifier', get_URL_var('dar_'));
            }
            

            // OBE Additional Color Assignments
            if (get_URL_var('a0').length > 0) {
                set_select_val('#body-bg', get_URL_var('a0'));
            }
            if (get_URL_var('a0_').length > 0) {
                set_select_val('#body-bg-modifier', get_URL_var('a0_'));
            }
            if (get_URL_var('a1').length > 0) {
                set_select_val('#body-color', get_URL_var('a1'));
            }
            if (get_URL_var('a1_').length > 0) {
                set_select_val('#body-color-modifier', get_URL_var('a1_'));
            }



            
            if (get_URL_var('b0').length > 0) {
                set_select_val('#link-color', get_URL_var('b0'));
            }
            if (get_URL_var('b0_').length > 0) {
                set_select_val('#link-color-modifier', get_URL_var('b0_'));
            }
            if (get_URL_var('b1').length > 0) {
                set_link_decoration_inputs(get_URL_var('b1'), '#link-decoration-type', '#link-decoration-color', '#link-decoration-color-modifier', '#link-decoration')
            }
            if (get_URL_var('b2').length > 0) {
                set_select_val('#link-decoration-color', get_URL_var('b2'));
            }
            if (get_URL_var('b2_').length > 0) {
                set_select_val('#link-decoration-color-modifier', get_URL_var('b2_'));
            }
            if (get_URL_var('b3').length > 0) {
                set_link_decoration_inputs(get_URL_var('b3'), '#link-hover-decoration-type', '#link-hover-decoration-color', '#link-hover-decoration-color-modifier', '#link-hover-decoration')
            }
            if (get_URL_var('b4').length > 0) {
                set_select_val('#link-hover-decoration', get_URL_var('b4'));
            }
            if (get_URL_var('b4_').length > 0) {
                set_select_val('#link-hover-decoration-modifier', get_URL_var('b4_'));
            }




            if (get_URL_var('c0').length > 0) {
                set_select_val('#mark-bg', get_URL_var('c0'));
            }
            if (get_URL_var('c0_').length > 0) {
                set_select_val('#mark-bg-modifier', get_URL_var('c0_'));
            }


            if (get_URL_var('d0').length > 0) {
                set_select_val('#input-bg', get_URL_var('d0'));
            }
            if (get_URL_var('d0_').length > 0) {
                set_select_val('#input-bg-modifier', get_URL_var('d0_'));
            }
            if (get_URL_var('d1').length > 0) {
                set_select_val('#input-color', get_URL_var('d1'));
            }
            if (get_URL_var('d1_').length > 0) {
                set_select_val('#input-color-modifier', get_URL_var('d1_'));
            }
            if (get_URL_var('d2').length > 0) {
                set_select_val('#input-placeholder-color', get_URL_var('d2'));
            }
            if (get_URL_var('d2_').length > 0) {
                set_select_val('#input-placeholder-color-modifier', get_URL_var('d2_'));
            }
            if (get_URL_var('d3').length > 0) {
                set_select_val('#input-disabled-bg', get_URL_var('d3'));
            }
            if (get_URL_var('d3_').length > 0) {
                set_select_val('#input-disabled-bg-modifier', get_URL_var('d3_'));
            }


            if (get_URL_var('e0').length > 0) {
                set_select_val('#input-group-addon-bg', get_URL_var('e0'));
            }
            if (get_URL_var('e0_').length > 0) {
                set_select_val('#input-group-addon-bg-modifier', get_URL_var('e0_'));
            }
            if (get_URL_var('e1').length > 0) {
                set_select_val('#input-group-addon-color', get_URL_var('e1'));
            }
            if (get_URL_var('e1_').length > 0) {
                set_select_val('#input-group-addon-color-modifier', get_URL_var('e1_'));
            }


            if (get_URL_var('f0').length > 0) {
                set_select_val('#component-active-bg', get_URL_var('f0'));
            }
            if (get_URL_var('f0_').length > 0) {
                set_select_val('#component-active-bg-modifier', get_URL_var('f0_'));
            }
            if (get_URL_var('f1').length > 0) {
                set_select_val('#component-active-color', get_URL_var('f1'));
            }
            if (get_URL_var('f1_').length > 0) {
                set_select_val('#component-active-color-modifier', get_URL_var('f1_'));
            }
            
            
            if (get_URL_var('g0').length > 0) {
                set_select_val('#dropdown-header-color', get_URL_var('g0'));
            }
            if (get_URL_var('g0_').length > 0) {
                set_select_val('#dropdown-header-color-modifier', get_URL_var('g0_'));
            }
            if (get_URL_var('g1').length > 0) {
                set_select_val('#dropdown-link-color', get_URL_var('g1'));
            }
            if (get_URL_var('g1_').length > 0) {
                set_select_val('#dropdown-link-color-modifier', get_URL_var('g1_'));
            }
            if (get_URL_var('g2').length > 0) {
                set_select_val('#dropdown-link-hover-bg', get_URL_var('g2'));
            }
            if (get_URL_var('g2_').length > 0) {
                set_select_val('#dropdown-link-hover-bg-modifier', get_URL_var('g2_'));
            }
            if (get_URL_var('g3').length > 0) {
                set_select_val('#dropdown-link-disabled-color', get_URL_var('g3'));
            }
            if (get_URL_var('g3_').length > 0) {
                set_select_val('#dropdown-link-disabled-color-modifier', get_URL_var('g3_'));
            }
            */
            

            
            




            
            
            

            /*
            $('#template-selector').on('change', function() {
                var link = $(this).val();
                window.location.href = link;
            });
            */
















			// SVG JAVASCRIPT
			
			var svgColors = ['red', 'rose', 'magenta', 'violet', 'blue', 'azure', 'cyan', 'spring-green', 'green', 'chartreuse', 'yellow', 'orange', 'dark-gray-orange', 'dark-gray', 'gray', 'blue-gray', 'light-gray-azure', 'light-gray', 'black', 'orange-gray', 'white'];
			
			// Set the default color
			var defaultFill = "#b3aeab";

            // set the classes needed to toggle visibility when the svg is used as a UI
            $('.js-color-wheel-inputs').find('.form-group').addClass('collapse show');
			
			// Loop through each svg part by id
			for (i = 0; i < svgColors.length; i++) { 
				// Make each each part of the color wheel the default color
				$("#" + svgColors[i] + "-slice").attr('style', "fill:" + defaultFill);
			}
			
			// Add on click functionality to each part of the color wheel
			for (i = 0; i < svgColors.length; i++) { 
				
				// Set on hover functionality for each piece of the wheel
				$("#" + svgColors[i] + "-slice").hover(function() {
					$(this).css('cursor','pointer');
				});
				
				// Set on click functionality for each piece of the wheel
				$("#" + svgColors[i] + "-slice").on( "click", function() {
					
					// Remove visual cue from every svg path first
					for (j = 0; j < svgColors.length; j++) {
						$("#" + svgColors[j] + "-slice").attr('opacity', "0.25");
					}
					
					// Then add visual cue to the selected svg path
					$(this).attr('opacity', "1");
					
					// Remove any existing color form input elements from view
					$('.js-color-wheel-inputs').find('.form-group').removeClass('show');
					
					// Display the input for the wheel item clicked
					var tempId = this.id;
                    var targetId = tempId.replace('-slice', '');
                    $('#' + targetId).parents('.form-group').collapse('show');
					
					// get window width
					var windowWidth = window.innerWidth;
					//console.log('windowWidth: ' + windowWidth);
					// if window is less pixels wide than bootstraps medium size breakpoint minus 1
					if (windowWidth <= 991) {
						// Scroll to appropriate input
						$('html, body').animate({
							scrollTop: $('#' + this.id + '-input').offset().top - 100
						}, 500);
					}
					
					// focus the input related to the clicked svg path
					//$('#' + this.id + '-input').focus();
					
				});
				
			}

			// utility function to deselect any selected svg elements
			// and return the view state to normal opacity
			var deselectSvg = function () {
				for (i = 0; i < svgColors.length; i++) {
					$("#" + svgColors[i] + "-slice").attr('opacity', "1");
				}
			}

            // listener to trigger the deselectSvg function when a UI button is clicked
            // and to show all hex color inputs upon the same click
            $('#view-all-slices').on( "click", function() {
                deselectSvg();
                $('.js-color-wheel-inputs').find('.form-group').addClass('show');
            });

            // script to add colors to wheel svg on page load
			for (i = 0; i < svgColors.length; i++) { 
                let colorVal = $('#' + svgColors[i]).val();
                $("#" + svgColors[i] + "-slice").attr('style', "fill:" + colorVal);
			}

            
            // utility function to run blend tool functionality
            var blendColors = function(){
                
                var input1 = $('#blend-first-color');
                var input2 = $('#blend-second-color');
                
                var val1 = input1.val() ? input1.val() : '#000000';
                var val2 = input2.val() ? input2.val() : '#ffffff';
                
                var hex1, hex2;
                
                if (val1.indexOf('#') !== -1) {
                    hex1 = val1;
                } else {
                    hex1 = '#' + val1;
                }
                if (val2.indexOf('#') !== -1) {
                    hex2 = val2;
                } else {
                    hex2 = '#' + val2;
                }
                
                input1.val(hex1);
                input2.val(hex2);

                var color1 = new tinycolor(hex1);
                var color2 = new tinycolor(hex2);
                var blend25 = tinycolor.mix(color1, color2, amount = 25);
                var blend50 = tinycolor.mix(color1, color2, amount = 50);
                var blend75 = tinycolor.mix(color1, color2, amount = 75);

                var lightTextHex = '#ffffff';
                var darkTextHex = '#000000';

                input1.css('background-color', color1).css('color', darkTextHex);
                input2.css('background-color', color2).css('color', darkTextHex);
                
                $('#color-one-block').val(color1.toHexString()).css('background-color', color1).css('color', darkTextHex);
                $('#color-blend25-block').val(blend25.toHexString()).css('background-color', blend25).css('color', darkTextHex);
                $('#color-blend50-block').val(blend50.toHexString()).css('background-color', blend50).css('color', darkTextHex);
                $('#color-blend75-block').val(blend75.toHexString()).css('background-color', blend75).css('color', darkTextHex);
                $('#color-two-block').val(color2.toHexString()).css('background-color', color2).css('color', darkTextHex);
                
                if (color1.isDark()){
                    $('#color-one-block').css('color', lightTextHex);
                    input1.css('color', lightTextHex);
                }
                if (blend25.isDark()){
                    $('#color-blend25-block').css('color', lightTextHex);
                }
                if (blend50.isDark()){
                    $('#color-blend50-block').css('color', lightTextHex);
                }
                if (blend75.isDark()){
                    $('#color-blend75-block').css('color', lightTextHex);
                }
                if (color2.isDark()){
                    $('#color-two-block').css('color', lightTextHex);
                    input2.css('color', lightTextHex);
                }

            };
            
            $('#blend-first-color, #blend-second-color').on('change', function() {
                blendColors();
            });

            $('#blend-first-color, #blend-second-color').on('blur', function() {
                blendColors();
            });

            $('#blend-tool-btn').on('click', function() {
                blendColors();
            });

            // instantiate ClipboardJS for input group copy button elements
            var clipboard = new ClipboardJS('.js-input-group-copy-btn');

            // script for input group clear input functionality
            $('.js-input-group-clear-btn').on('click', function() {
                
                var input = $(this).parents('.input-group').find('input');
                input.val('');
                input.focus();

            });

            
            
            
            // utility function for color wheel input group inputs
            var updateWheelColor = function(jqueryElRef){
                
                // assign the passed jQuery element reference to a var
                var input = jqueryElRef;
                
                // get the id of the passed element
                var id = $(input).attr('id');
                
                // get the current value of the passed element & clean it + add a prepended #
                var currentVal = $(input).val();
                var cleanedVal = '#' + currentVal.replace(/[^a-z0-9]/gi, '');
                
                // set the default input text hex color
                var textHex = '#000000';
                
                // if the current value is longer than just a # symbol...
                if (cleanedVal.length > 1)
                {
                    // create a tinycolor instance with the current value
                    var color = new tinycolor(cleanedVal);
                    
                    // if the color is dark, change the text color to white
                    if (color.isDark()){
                        textHex = '#ffffff';
                    }

                    // update the input value and it's background and text colors
                    $(input).val(cleanedVal).css('background-color', cleanedVal).css('color', textHex);
                    
                    // update the wheel svg to match the new hex color
                    $("#" + id + "-slice").attr('style', "fill:" + cleanedVal);
                }
                // else if the current value is just a # symbol...
                else
                {
                    // get the placeholder hex value from the passed element
                    var placeholder = $(input).attr('placeholder');
                    
                    // create a tinycolor instance with the placeholder value
                    var placeholderColor = new tinycolor(placeholder);
                    
                    // if the color is dark, change the text color to white
                    if (placeholderColor.isDark()){
                        textHex = '#ffffff';
                    }
                    
                    // update the input value and it's background and text colors
                    $(input).val(placeholder).css('background-color', placeholder).css('color', textHex);

                    // update the wheel svg back to the default/placeholder color
                    $("#" + id + "-slice").attr('style', "fill:" + placeholder);
                }

            };
            
            // script for color wheel color input groups
            $( ".js-hex-code-input" ).on( "change", function() {
                /*var input = $(this);
                var id = $(this).attr('id');
                var currentVal = $(input).val();
                var cleanedVal = currentVal.replace(/[^a-z0-9]/gi, '');
                if (cleanedVal.length > 1) {
                    $(input).val('#' + cleanedVal);
                    // update the wheel svg to match the new hex color
                    $("#" + id + "-slice").attr('style', "fill:#" + cleanedVal);
                } else {
                    $(input).val('');
                }*/
                updateWheelColor($(this));
            });

            $( ".js-hex-code-input" ).on('blur', function() {
                updateWheelColor($(this));
            });






            // utility function to generate the readonly form input groups for dynamically generated harmony color hex codes
            var createHarmonyInput = function(hexString, labelTxt, id){
                
                var parent = document.createElement('div');
                    parent.classList = 'form-group';
                
                var label = document.createElement('label');
                    label.setAttribute('for', id);
                    label.classList = 'small font-weight-bold';
                
                parent.appendChild(label);
                
                var label_text = document.createTextNode(labelTxt);
                
                label.appendChild(label_text);
                
                var inputGroup = document.createElement('div');
                    inputGroup.classList = 'input-group';
                
                parent.appendChild(inputGroup);

                var inputTextHex = '#000000';
                var tcColor = new tinycolor(hexString);
                if (tcColor.isDark())
                {
                    inputTextHex = '#ffffff';
                }
                
                var input = document.createElement('input');
                    input.setAttribute('type', 'text');
                    input.classList = 'form-control';
                    input.value = hexString;
                    input.setAttribute('type', 'text');
                    input.setAttribute('placeholder', hexString);
                    input.setAttribute('id', id);
                    input.setAttribute('readonly', 'readonly');
                    input.style.backgroundColor = hexString;
                    input.style.color = inputTextHex;
                
                inputGroup.appendChild(input);
                
                var btnParent = document.createElement('div');
                    btnParent.classList = 'input-group-append';
                
                inputGroup.appendChild(btnParent);
                
                var copyBtn = document.createElement('button');
                    copyBtn.classList = 'js-input-group-copy-btn btn btn-light border';
                    copyBtn.setAttribute('type', 'button');
                    copyBtn.setAttribute('data-clipboard-target', '#' + id);
                
                btnParent.appendChild(copyBtn);
                
                var icon = document.createElement('i');
                    icon.classList = 'fas fa-copy';
                
                copyBtn.appendChild(icon);

                return parent;
            };



            // utility function to apply the harmony updates for different element listeners
            var updateHarmonyColors = function(){

                var baseHex = $('#harmony-base-color').val();
                
                var value = $("input[name='harmony-mode']:checked"). val();

                var tcColor = new tinycolor(baseHex);
                
                var colorsArray = [];
                var singleHex = '';

                if (value === 'Monochromatic')
                {
                    var colors = tcColor.monochromatic();
                    colorsArray = colors.map( function(t) { return t.toHexString(); } );
                }
                else if (value === 'Complementary')
                {
                    singleHex = tcColor.complement().toHexString();
                }
                else if (value === 'Analogous')
                {
                    var colors = tcColor.analogous();
                    colorsArray = colors.map( function(t) { return t.toHexString(); } );
                }
                else if (value === 'Split Complementary')
                {
                    var colors = tcColor.splitcomplement();
                    colorsArray = colors.map( function(t) { return t.toHexString(); } );
                }
                else if (value === 'Triad')
                {
                    var colors = tcColor.triad();
                    colorsArray = colors.map( function(t) { return t.toHexString(); } );
                }
                else if (value === 'Tetrad')
                {
                    var colors = tcColor.tetrad();
                    colorsArray = colors.map( function(t) { return t.toHexString(); } );
                }
                
                var target = document.getElementById('harmony-colors-wrapper');

                // clear out the target element's existing html
                if (colorsArray.length > 0 || singleHex != '')
                {
                    target.innerHTML = '';
                }
                
                if (colorsArray.length > 0)
                {
                    // initialize an array to hold unique hex code values
                    var uniqueHexCodes = [];
                    
                    // remove any duplicate hex codes from the colorsArray and add to uniqueHexCodes array
                    $.each(colorsArray, function(i, el){
                        if($.inArray(el, uniqueHexCodes) === -1) uniqueHexCodes.push(el);
                    });
                    
                    // loop through the uniqueHexCodes array
                    for (var i = 0; i < uniqueHexCodes.length; i++)
                    {
                        var number = i + 1;
                        var markup = createHarmonyInput(uniqueHexCodes[i], value + ' Color ' + number, 'harmony-color-' + i);
                        target.appendChild(markup);
                    }
                }
                else if (singleHex != '')
                {
                    var markup = createHarmonyInput(singleHex, value + ' Color', 'harmony-color')
                    target.appendChild(markup);
                }

                $('#color-harmony-tool-modal').modal('handleUpdate');

            };

            // utility function to update visual colors of #harmony-base-color
            var updateHarmonyColorInput = function(){
                var target = $('#harmony-base-color');
                var value = target.val() ? target.val() : '#000000';
                var tcColor = new tinycolor(value);
                var textColor = '#000000';
                if (tcColor.isDark()) {
                    textColor = '#ffffff';
                }
                target.val(tcColor.toHexString()).css('background-color', tcColor.toHexString()).css('color', textColor);
            };

            

            $( "input[name='harmony-mode'], #harmony-base-color" ).on('change', function() {
                updateHarmonyColors();
                updateHarmonyColorInput();
            });

            $( "#harmony-base-color" ).on('blur', function() {
                updateHarmonyColors();
                updateHarmonyColorInput();
            });

            $( "#harmony-tool-btn" ).on('click', function() {
                updateHarmonyColors();
            });

        });

    </script>

{% endblock %}