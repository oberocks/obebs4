<!-- {{ global_strings['settings']['slug'] }}.njk -->

{% set fileName = global_strings['settings']['slug'] + '.html' %}
{% set pageTitle = global_strings['settings']['title'] %}
{% set pageDescrip = global_strings['settings']['description'] %}

{% extends "boilerplate.njk" %}

{% block content %}
        
        {% include "partials/_navigation.njk" %}
        
        {% set heroTitle = pageTitle %}
        {% set heroDescrip = pageDescrip %}
        {% set heroBgClass = global_strings['settings']['background'] %}
        {% set heroBorderClass = global_strings['settings']['border'] %}
        {% include "partials/_hero.njk" %}

        {% include "partials/settings/_settings_generator_old.njk" %}

        {% include "partials/_footer.njk" %}

{% endblock %}


{% block javascript %}
        
    <script>
        
        $(function() {
            
            $( ".js-increment-down" ).on( "click", function() {
                var input = $(this).parents('.form-group').find('input');
                var currentVal = $(input).val();
                var units = $(input).data('units');
                var max = Number($(input).data('max'));
                var min = Number($(input).data('min'));
                var number = Number(currentVal.replace(/\D+/g, ''));
                var finalNumb = number;
                if (number > min && number <= max) {
                    finalNumb--;
                } else if (number <= min) {
                    finalNumb = min;
                }
                $(input).val(finalNumb + units);
            });

            $( ".js-increment-up" ).on( "click", function() {
                var input = $(this).parents('.form-group').find('input');
                var currentVal = $(input).val();
                var units = $(input).data('units');
                var max = Number($(input).data('max'));
                var min = Number($(input).data('min'));
                var number = Number(currentVal.replace(/\D+/g, ''));
                var finalNumb = number;
                if (number >= min && number < max) {
                    finalNumb++;
                } else if (number >= max) {
                    finalNumb = max;
                }
                $(input).val(finalNumb + units);
            });

            $( ".js-increment-target" ).on( "change", function() {
                var input = $(this);
                var currentVal = $(input).val();
                var units = $(input).data('units');
                var max = Number($(input).data('max'));
                var min = Number($(input).data('min'));
                var number = Number(currentVal.replace(/\D+/g, ''));
                var finalNumb = number;
                if (number >= max) {
                    finalNumb = max;
                } else if (number <= min) {
                    finalNumb = min;
                }
                $(input).val(finalNumb + units);
            });

            $( ".js-hex-code-input" ).on( "change", function() {
                var input = $(this);
                var id = $(this).attr('id');
                var currentVal = $(input).val();
                var cleanedVal = currentVal.replace(/[^a-z0-9]/gi, '');
                if (cleanedVal.length > 1) {
                    $(input).val('#' + cleanedVal);
                    // update the wheel svg to match the new hex color
                    $("#" + id + "-slice").attr('style', "fill:#" + cleanedVal);
                } else {
                    $(input).val('');
                }
            });

            
            // script to toggle the OBE Condensed Font checkbox on/off depending on bootstrap vs google fonts selection
            $('#js-font-options a[data-toggle="tab"]').on('click', function () {
                var parent = $(this).parents('#js-font-options');
                if ($(this).attr('id') === 'bootstrap-tab') {
                    
                    $('#enable-obeb4-secondary-font').prop('checked', false);

                } else if ($(this).attr('id') === 'google-fonts-tab') {
                    
                    $('#enable-obeb4-secondary-font').prop('checked', true);

                }
            });
            
            // script to toggle the secondary brand font input visibility based on the associated checkbox
            $('#enable-obeb4-secondary-font').on('click', function () {
                if ($(this).prop('checked')) {
                    $('#google-font-family-secondary').parent('.form-group').collapse('show');
                } else {
                    $('#google-font-family-secondary').parent('.form-group').collapse('hide');
                }
            });

            // global array of font weight options for utility functions
            var weightOptions = ['100', '100i', '200', '200i', '300', '300i', '400', '400i', '500', '500i', '600', '600i', '700', '700i', '800', '800i', '900', '900i'];
            
            // utility function to add all selected goog font weight details to the output object
            function updateFontWeights(string, fontTypePartial, obj) {
                var weights = string.split(':')[1];
                var weightsArray = weights.split(',');
                for (var x = 0; x < weightsArray.length; x++) {
                    for (var y = 0; y < weightOptions.length; y++) {
                        if (String(weightsArray[x]) == String(weightOptions[y])) {
                            obj[fontTypePartial + '-font-weight-' + weightOptions[y]] = "true";
                        }
                    }
                }
            }

            // utility function to mark all of a font types weights as false
            function outputFalseFontWeights(fontTypePartial, obj) {
                for (var z = 0; z < weightOptions.length; z++) {
                    obj[fontTypePartial + '-font-weight-' + weightOptions[z]] = "false";
                }
            }

            
            // NOTE: This was added as a plugin and the data attribute
            //       was changed so this is now an obsolete script!
            //
            // utility function to toggle visibility of extra color option for link hover decoration CSS
            /*$("[data-toggle-displayed-text]").on('click', function () {
                let toggleTxt = $(this).data('toggle-displayed-text');
                let currentTxt = $(this).text();
                $(this).data('toggle-displayed-text', currentTxt);
                $(this).text(toggleTxt);
            });*/



            // utility functions to append any link hover decoration color to the hover decoration value
            let concat_link_hover_decoration_val = function () {
                
                // collect data from selects
                let decoration = $('#link-hover-decoration-type').val();
                let color = $('#link-hover-decoration-color').val();
                let tintShade = $('#link-hover-decoration-color-modifier').val();
                
                // make all select elements not disabled
                $('#link-hover-decoration-type, #link-hover-decoration-color, #link-hover-decoration-color-modifier').attr('disabled', false);
                
                // initialize the final output var
                let output;
                
                if (decoration === 'none') {
                    $('#link-hover-decoration-color, #link-hover-decoration-color-modifier').find('option').attr('selected', false);
                    $('#link-hover-decoration-color, #link-hover-decoration-color-modifier').find('option[value="none"]').attr('selected', true);
                    $('#link-hover-decoration-color, #link-hover-decoration-color-modifier').attr('disabled', true);
                    output = decoration;
                    //$('#link-hover-decoration').siblings('.collapse').collapse('hide');
                } else {
                    //$('#link-hover-decoration').siblings('.collapse').collapse('show');
                    if (color === 'none') {
                        $('#link-hover-decoration-color-modifier').find('option').attr('selected', false);
                        $('#link-hover-decoration-color-modifier').find('option[value="none"]').attr('selected', true);
                        $('#link-hover-decoration-color-modifier').attr('disabled', true);
                        output = decoration;
                    } else {
                        if (tintShade === 'none') {
                            output = decoration + ' ' + color;
                        } else {
                            output = decoration + ' ' + color + '-' + tintShade;
                        }
                        
                    }
                    
                }
                $('#link-hover-decoration').val(output);

            };
            $('#link-hover-decoration-type, #link-hover-decoration-color, #link-hover-decoration-color-modifier').on('change', function () {
                concat_link_hover_decoration_val();
            });
            concat_link_hover_decoration_val();

            // utility functions to append any link decoration color to the decoration value
            let concat_link_decoration_val = function () {
                
                // collect data from selects
                let decoration = $('#link-decoration-type').val();
                let color = $('#link-decoration-color').val();
                let tintShade = $('#link-decoration-color-modifier').val();
                
                // make all select elements not disabled
                $('#link-decoration-type, #link-decoration-color, #link-decoration-color-modifier').attr('disabled', false);
                
                // initialize the final output var
                let output;
                
                if (decoration === 'none') {
                    $('#link-decoration-color, #link-decoration-color-modifier').find('option').attr('selected', false);
                    $('#link-decoration-color, #link-decoration-color-modifier').find('option[value="none"]').attr('selected', true);
                    $('#link-decoration-color, #link-decoration-color-modifier').attr('disabled', true);
                    output = decoration;
                    //$('#link-decoration').siblings('.collapse').collapse('hide');
                } else {
                    //$('#link-decoration').siblings('.collapse').collapse('show');
                    if (color === 'none') {
                        $('#link-decoration-color-modifier').find('option').attr('selected', false);
                        $('#link-decoration-color-modifier').find('option[value="none"]').attr('selected', true);
                        $('#link-decoration-color-modifier').attr('disabled', true);
                        output = decoration;
                    } else {
                        if (tintShade === 'none') {
                            output = decoration + ' ' + color;
                        } else {
                            output = decoration + ' ' + color + '-' + tintShade;
                        }
                        
                    }
                    
                }
                $('#link-decoration').val(output);

            };
            $('#link-decoration-type, #link-decoration-color, #link-decoration-color-modifier').on('change', function () {
                concat_link_decoration_val();
            });
            concat_link_decoration_val();



            // SCRIPT TO HIDE PRISM.JS JSON SECTION IF CURRENTLY SHOWING
            // AND A USER CLICKS ANY FORM ELEMENTS
            $('.form-group, .form-check, #js-font-options .nav-item').on('click', function () {
                
                if ($('#js-json-target').hasClass('js-json-is-visible')) {
                    $('#js-json-target').collapse('hide');
                }
                
                if ($('#template-url').hasClass('js-json-is-visible')) {
                    $('#template-url').collapse('hide');
                }

            });




            // process form data script and validation
            $('#get-json-btn').on( "click", function() {

                var object = {};

                var color_50 = $('#color-50-lighten-percent').val();
                var color_100 = $('#color-100-lighten-percent').val();
                var color_200 = $('#color-200-lighten-percent').val();
                var color_300 = $('#color-300-lighten-percent').val();
                var color_400 = $('#color-400-lighten-percent').val();
                var color_600 = $('#color-600-darken-percent').val();
                var color_700 = $('#color-700-darken-percent').val();
                var color_800 = $('#color-800-darken-percent').val();
                var color_900 = $('#color-900-darken-percent').val();


                
                object['enable-obeb4-alert-wheel-colors'] = $('#enable-obeb4-alert-wheel-colors').is(':checked') ? "true" : "false";

                object['enable-obeb4-alert-variations'] = $('#enable-obeb4-alert-variations').is(':checked') ? "true" : "false";

                object['enable-obeb4-background-wheel-colors'] = $('#enable-obeb4-background-wheel-colors').is(':checked') ? "true" : "false";

                object['enable-obeb4-background-tints-shades'] = $('#enable-obeb4-background-tints-shades').is(':checked') ? "true" : "false";

                object['enable-obeb4-1-color-gradients'] = $('#enable-obeb4-1-color-gradients').is(':checked') ? "true" : "false";






                object['enable-obeb4-2-color-gradients'] = $('#enable-obeb4-2-color-gradients').is(':checked') ? "true" : "false";

                object['enable-obeb4-3-color-gradients'] = $('#enable-obeb4-3-color-gradients').is(':checked') ? "true" : "false";

                object['enable-obeb4-badge-wheel-colors'] = $('#enable-obeb4-badge-wheel-colors').is(':checked') ? "true" : "false";

                object['enable-obeb4-border-wheel-colors'] = $('#enable-obeb4-border-wheel-colors').is(':checked') ? "true" : "false";

                object['enable-obeb4-border-tints-shades'] = $('#enable-obeb4-border-tints-shades').is(':checked') ? "true" : "false";

                object['enable-obeb4-border-widths'] = $('#enable-obeb4-border-widths').is(':checked') ? "true" : "false";

                object['enable-obeb4-button-wheel-colors'] = $('#enable-obeb4-button-wheel-colors').is(':checked') ? "true" : "false";

                object['enable-obeb4-button-sizes'] = $('#enable-obeb4-button-sizes').is(':checked') ? "true" : "false";

                object['enable-obeb4-dropdowns'] = $('#enable-obeb4-dropdowns').is(':checked') ? "true" : "false";

                object['enable-obeb4-element-sizes'] = $('#enable-obeb4-element-sizes').is(':checked') ? "true" : "false";

                object['enable-obeb4-lists'] = $('#enable-obeb4-lists').is(':checked') ? "true" : "false";

                object['enable-obeb4-list-groups'] = $('#enable-obeb4-list-groups').is(':checked') ? "true" : "false";

                object['enable-obeb4-box-shadows'] = $('#enable-obeb4-box-shadows').is(':checked') ? "true" : "false";

                object['enable-obeb4-text-shadows'] = $('#enable-obeb4-text-shadows').is(':checked') ? "true" : "false";

                object['enable-obeb4-tables'] = $('#enable-obeb4-tables').is(':checked') ? "true" : "false";

                object['enable-obeb4-text-wheel-colors'] = $('#enable-obeb4-text-wheel-colors').is(':checked') ? "true" : "false";

                object['enable-obeb4-text-tints-shades'] = $('#enable-obeb4-text-tints-shades').is(':checked') ? "true" : "false";

                object['enable-obeb4-text-sizes'] = $('#enable-obeb4-text-sizes').is(':checked') ? "true" : "false";

                object['enable-obeb4-tooltips'] = $('#enable-obeb4-tooltips').is(':checked') ? "true" : "false";

                object['enable-obeb4-form-element-wheel-colors'] = $('#enable-obeb4-form-element-wheel-colors').is(':checked') ? "true" : "false";

                object['enable-obeb4-popovers'] = $('#enable-obeb4-popovers').is(':checked') ? "true" : "false";

                
                
                
                
                object['enable-obeb4-responsive-headlines'] = $('#enable-obeb4-responsive-headlines').is(':checked') ? "true" : "false";

                object['enable-obeb4-modal-utilities'] = $('#enable-obeb4-modal-utilities').is(':checked') ? "true" : "false";

                object['enable-obeb4-material-design-forms'] = $('#enable-obeb4-material-design-forms').is(':checked') ? "true" : "false";

                object['enable-obeb4-opacity'] = $('#enable-obeb4-opacity').is(':checked') ? "true" : "false";

                object['enable-obeb4-custom-dropdown-selects'] = $('#enable-obeb4-custom-dropdown-selects').is(':checked') ? "true" : "false";

                object['enable-obeb4-fab-buttons'] = $('#enable-obeb4-fab-buttons').is(':checked') ? "true" : "false";

                object['enable-obeb4-fa5-icon-checkboxes'] = $('#enable-obeb4-fa5-icon-checkboxes').is(':checked') ? "true" : "false";

                object['enable-obeb4-off-canvas-nav-modals'] = $('#enable-obeb4-off-canvas-nav-modals').is(':checked') ? "true" : "false";

                object['enable-obeb4-spacing-utilities'] = $('#enable-obeb4-spacing-utilities').is(':checked') ? "true" : "false";

                object['enable-obeb4-datepicker-component'] = $('#enable-obeb4-datepicker-component').is(':checked') ? "true" : "false";

                object['enable-obeb4-toggle-text-mini-plugin'] = $('#enable-obeb4-toggle-text-mini-plugin').is(':checked') ? "true" : "false";
                

                
                
                
                
                
                
                
                
                if ($('#obeb4-1-color-tint-value').val().length > 1) {
                    object['obeb4-1-color-tint-value'] = $('#obeb4-1-color-tint-value').val();
                }
                if ($('#obeb4-1-color-shade-value').val().length > 1) {
                    object['obeb4-1-color-shade-value'] = $('#obeb4-1-color-shade-value').val();
                }
                

                

                

                /*
                if ($('#enable-obeb4-font-weights').is(':checked')) {
                    object['enable-obeb4-font-weights'] = "true";
                } else {
                    object['enable-obeb4-font-weights'] = "false";
                }
                */
                


                var cleanFontFamCSS = function(element){
                    var input = $(element);
                    var currentVal = $(input).val();
                    var cleanedVal = currentVal.replace(';', '').replace('font-family: ', '').replace('"', '\"');
                    return cleanedVal;
                }
                
                var cleanGoogleFontURL = function(element){
                    var input = $(element);
                    var currentVal = $(input).val();
                    var cleanedVal = currentVal.replace('https://', '').replace('<link href="', '').replace('" rel="stylesheet">', '').replace(/\./g, '___').replace(/:/g, '---').replace('?', 'qqq');
                    return cleanedVal;
                }
                
                if ($('#bootstrap-tab').hasClass('active')) {
                    
                    object['enable-bootstrap-default-fonts'] = "true";
                    object['enable-google-fonts'] = "false";

                    object['google-fonts-url'] = "false";

                    object['font-family-sans-serif'] = cleanFontFamCSS('#bootstrap-font-family-sans-serif');
                    object['font-family-monospace'] = cleanFontFamCSS('#bootstrap-font-family-monospace');

                    object['enable-obeb4-secondary-font'] = "false";
                    object['font-family-secondary'] = "false";

                    // assign default font weights to the output object
                    // and make all font weights false by default
                    for (var xx = 0; xx < weightOptions.length; xx++) {
                        object['primary-font-weight-' + weightOptions[xx]] = "false";
                        object['monospace-font-weight-' + weightOptions[xx]] = "false";
                        object['secondary-font-weight-' + weightOptions[xx]] = "false";
                    }

                } else if ($('#google-fonts-tab').hasClass('active')) {
                    
                    object['enable-bootstrap-default-fonts'] = "false";
                    object['enable-google-fonts'] = "true";

                    object['google-fonts-url'] = cleanGoogleFontURL('#google-fonts-url');

                    object['font-family-sans-serif'] = cleanFontFamCSS('#google-font-family-sans-serif');
                    object['font-family-monospace'] = cleanFontFamCSS('#google-font-family-monospace');

                    if ($('#enable-obeb4-secondary-font').is(':checked')) {
                        object['enable-obeb4-secondary-font'] = "true";
                        object['font-family-secondary'] = cleanFontFamCSS('#google-font-family-secondary');
                    } else {
                        object['enable-obeb4-secondary-font'] = "false";
                        object['font-family-secondary'] = "false";
                    }

                    // assign default font weights to the output object
                    // and make all font weights false by default
                    for (var xx = 0; xx < weightOptions.length; xx++) {
                        object['primary-font-weight-' + weightOptions[xx]] = "false";
                        object['monospace-font-weight-' + weightOptions[xx]] = "false";
                        object['secondary-font-weight-' + weightOptions[xx]] = "false";
                    }

                    // get the google fonts embed string
                    var gfEmbed = $('#google-fonts-url').val();
                    // clean the string for processing
                    var gfClean = gfEmbed.replace('<link href="', '').replace('https://fonts.googleapis.com/css?family=', '').replace('" rel="stylesheet">', '');
                    // create an array of the font strings
                    var fonts = gfClean.split('|');
                    // create a new cleaned array from the array of font strings
                    var cleanFonts = [];
                    for (var j = 0; j < fonts.length; j++) {
                        cleanFonts.push(fonts[j].replace(/\+/g,' '));
                    }
                    //console.log(cleanFonts);
                    //console.log('cleanFonts length: ' + cleanFonts.length);
                    
                    // get the each font CSS declaration value
                    var gfP = $('#google-font-family-sans-serif').val();
                    var gfPrimary = gfP.substring(gfP.indexOf("'") + 1, gfP.lastIndexOf("'"));
                    var gfM = $('#google-font-family-monospace').val();
                    var gfMonospace = gfM.substring(gfM.indexOf("'") + 1, gfM.lastIndexOf("'"));
                    var gfS = $('#google-font-family-secondary').val();
                    var gfSecondary = gfS.substring(gfS.indexOf("'") + 1, gfS.lastIndexOf("'"));

                    //console.log('gfPrimary: ' + gfPrimary);
                    //console.log('gfMonospace: ' + gfMonospace);
                    //console.log('gfSecondary: ' + gfSecondary);

                    function getFontType (fontString) {
                        if (gfPrimary === fontString) {
                            return 'primary';
                        } else if (gfMonospace === fontString) {
                            return 'monospace';
                        } else if (gfSecondary === fontString) {
                            return 'secondary';
                        }
                    }

                    // loop through cleaned array font strings
                    for (var k = 0; k < cleanFonts.length; k++) {
                        
                        // if clean font string has a colon
                        if (cleanFonts[k].indexOf(':') !== -1) {
                            
                            // extract the font name
                            var fontName = cleanFonts[k].substr(0, cleanFonts[k].indexOf(':'));
                            
                            var type = getFontType(fontName);

                            if (type === 'primary') {
                                updateFontWeights(cleanFonts[k], 'primary', object);
                            } else if (type === 'monospace') {
                                updateFontWeights(cleanFonts[k], 'monospace', object);
                            } else if (type === 'secondary') {
                                updateFontWeights(cleanFonts[k], 'secondary', object);
                            }

                        } // END if

                    } // END for loop

                } // END if/else for selected fonts tab




                var setColorVariants = function (colorString) {
                    var value = $('#' + colorString).val();
                    object[colorString] = value;
                    object[colorString + '-50'] = 'lighten($' + colorString + ', ' + color_50 + ')';
                    object[colorString + '-100'] = 'lighten($' + colorString + ', ' + color_100 + ')';
                    object[colorString + '-200'] = 'lighten($' + colorString + ', ' + color_200 + ')';
                    object[colorString + '-300'] = 'lighten($' + colorString + ', ' + color_300 + ')';
                    object[colorString + '-400'] = 'lighten($' + colorString + ', ' + color_400 + ')';
                    object[colorString + '-500'] = '$' + colorString;
                    object[colorString + '-600'] = 'darken($' + colorString + ', ' + color_600 + ')';
                    object[colorString + '-700'] = 'darken($' + colorString + ', ' + color_700 + ')';
                    object[colorString + '-800'] = 'darken($' + colorString + ', ' + color_800 + ')';
                    object[colorString + '-900'] = 'darken($' + colorString + ', ' + color_900 + ')';
                }



                if ($('#white').val().length > 1) {
                    setColorVariants('white');
                }
                if ($('#light-gray').val().length > 1) {
                    setColorVariants('light-gray');
                }
                if ($('#gray').val().length > 1) {
                    setColorVariants('gray');
                }
                if ($('#dark-gray').val().length > 1) {
                    setColorVariants('dark-gray');
                }
                if ($('#black').val().length > 1) {
                    setColorVariants('black');
                }
                if ($('#red').val().length > 1) {
                    setColorVariants('red');
                }
                if ($('#rose').val().length > 1) {
                    setColorVariants('rose');
                }
                if ($('#magenta').val().length > 1) {
                    setColorVariants('magenta');
                }
                if ($('#violet').val().length > 1) {
                    setColorVariants('violet');
                }
                if ($('#blue').val().length > 1) {
                    setColorVariants('blue');
                }
                if ($('#azure').val().length > 1) {
                    setColorVariants('azure');
                }
                if ($('#cyan').val().length > 1) {
                    setColorVariants('cyan');
                }
                if ($('#spring-green').val().length > 1) {
                    setColorVariants('spring-green');
                }
                if ($('#green').val().length > 1) {
                    setColorVariants('green');
                }
                if ($('#chartreuse').val().length > 1) {
                    setColorVariants('chartreuse');
                }
                if ($('#yellow').val().length > 1) {
                    setColorVariants('yellow');
                }
                if ($('#orange').val().length > 1) {
                    setColorVariants('orange');
                }
                if ($('#orange-gray').val().length > 1) {
                    setColorVariants('orange-gray');
                }
                if ($('#dark-gray-orange').val().length > 1) {
                    setColorVariants('dark-gray-orange');
                }
                if ($('#blue-gray').val().length > 1) {
                    setColorVariants('blue-gray');
                }
                if ($('#light-gray-azure').val().length > 1) {
                    setColorVariants('light-gray-azure');
                }




                var setColorsData = function (idString) {
                    var value = $('#' + idString).val();
                    var value_mod = $('#' + idString + '-modifier').val();
                    if (value_mod === 'none') {
                        object[idString] = '$' + value;
                    } else {
                        object[idString] = '$' + value + '-' + value_mod;
                    }   
                }

                var setLinkDecorationData = function (idString) {
                    var value = $('#' + idString).val();
                    object[idString] = value;  
                }
                
                
                setColorsData('primary');
                setColorsData('secondary');
                setColorsData('success');
                setColorsData('info');
                setColorsData('warning');
                setColorsData('danger');
                setColorsData('light');
                setColorsData('dark');

                setColorsData('body-bg');
                setColorsData('body-color');

                setColorsData('link-color');
                setLinkDecorationData('link-decoration');
                setLinkDecorationData('link-hover-decoration');

                setColorsData('mark-bg');

                setColorsData('input-bg');
                setColorsData('input-color');
                setColorsData('input-placeholder-color');
                setColorsData('input-disabled-bg');

                setColorsData('input-group-addon-bg');
                setColorsData('input-group-addon-color');
                
                setColorsData('component-active-bg');
                setColorsData('component-active-color');

                setColorsData('dropdown-header-color');
                setColorsData('dropdown-link-color');
                setColorsData('dropdown-link-hover-bg');
                setColorsData('dropdown-link-disabled-color');
                
                //console.log(object);
                
                






                //
                // STRINGIFY OBJECT INTO JSON AND USE PRISM TO DISPLAY AS HIGHLIGHTED CODE
                //

                $('#js-json-target pre').remove();
                
                var target = document.getElementById('js-json-target');

                var pre = document.createElement('pre');
                var code = document.createElement('code');
                    code.className = 'language-json line-numbers';
                var json = JSON.stringify(object, null, 4);
                var textnode = document.createTextNode(json);

                code.appendChild(textnode);
                pre.appendChild(code);
                target.appendChild(pre);


                //
                // GENERATE TEMPLATE (URL) SCRIPTS
                //

                function get_checkbox_val(idSelector) {
                    if ($(idSelector).is(':checked')) {
                        return 1;
                    } else {
                        return 0;
                    }
                }

                function get_color_val(idSelector) {
                    return $(idSelector).val().replace('#', '%23');
                }

                function get_percent_val(idSelector) {
                    return $(idSelector).val().replace('%', '%25');
                }

                function get_tab_selection() {
                    if ($('#google-fonts').hasClass('active')) {
                        return 'google';
                    } else if ($('#bootstrap').hasClass('active')) {
                        return 'bootstrap';
                    }
                }

                var currentURL = window.location.href;
                var url;
                if (currentURL.indexOf('?') > -1) {
                    url = currentURL.substr(0, currentURL.indexOf('?'));
                } else {
                    url = currentURL;
                }
                //console.log(url);

                var template = {};
                
                // OBE Color Options
                template.a = get_checkbox_val('#enable-obeb4-alert-wheel-colors');
                template.b = get_checkbox_val('#enable-obeb4-alert-variations');
                template.c = get_checkbox_val('#enable-obeb4-background-wheel-colors');
                template.d = get_checkbox_val('#enable-obeb4-background-tints-shades');
                template.e = get_checkbox_val('#enable-obeb4-1-color-gradients');
                template.f = get_checkbox_val('#enable-obeb4-2-color-gradients');
                template.g = get_checkbox_val('#enable-obeb4-3-color-gradients');
                template.h = get_checkbox_val('#enable-obeb4-badge-wheel-colors');
                template.i = get_checkbox_val('#enable-obeb4-border-wheel-colors');
                template.j = get_checkbox_val('#enable-obeb4-border-tints-shades');
                template.k = get_checkbox_val('#enable-obeb4-button-wheel-colors');
                template.l = get_checkbox_val('#enable-obeb4-dropdowns');
                template.m = get_checkbox_val('#enable-obeb4-list-groups');
                template.n = get_checkbox_val('#enable-obeb4-tables');
                template.o = get_checkbox_val('#enable-obeb4-text-wheel-colors');
                template.p = get_checkbox_val('#enable-obeb4-text-tints-shades');
                template.q = get_checkbox_val('#enable-obeb4-tooltips');
                template.r = get_checkbox_val('#enable-obeb4-form-element-wheel-colors');
                template.s = get_checkbox_val('#enable-obeb4-popovers');
                
                // OBE Utility Options
                template.t = get_checkbox_val('#enable-obeb4-border-widths');
                template.u = get_checkbox_val('#enable-obeb4-button-sizes');
                template.v = get_checkbox_val('#enable-obeb4-element-sizes');
                template.w = get_checkbox_val('#enable-obeb4-lists');
                template.x = get_checkbox_val('#enable-obeb4-box-shadows');
                template.y = get_checkbox_val('#enable-obeb4-text-shadows');
                template.z = get_checkbox_val('#enable-obeb4-text-sizes');

                template.aa = get_checkbox_val('#enable-obeb4-responsive-headlines');
                template.bb = get_checkbox_val('#enable-obeb4-modal-utilities');
                template.cc = get_checkbox_val('#enable-obeb4-material-design-forms');
                template.dd = get_checkbox_val('#enable-obeb4-opacity');
                template.ee = get_checkbox_val('#enable-obeb4-custom-dropdown-selects');
                template.ff = get_checkbox_val('#enable-obeb4-fab-buttons');
                template.gg = get_checkbox_val('#enable-obeb4-fa5-icon-checkboxes');
                template.hh = get_checkbox_val('#enable-obeb4-off-canvas-nav-modals');
                template.ii = get_checkbox_val('#enable-obeb4-spacing-utilities');
                template.jj = get_checkbox_val('#enable-obeb4-datepicker-component');
                template.kk = get_checkbox_val('#enable-obeb4-toggle-text-mini-plugin');

                // OBE Color Wheel Colors
                template.white = get_color_val('#white');
                template.lightGray = get_color_val('#light-gray');
                template.gray = get_color_val('#gray');
                template.darkGray = get_color_val('#dark-gray');
                template.black = get_color_val('#black');
                template.red = get_color_val('#red');
                template.rose = get_color_val('#rose');
                template.magenta = get_color_val('#magenta');
                template.violet = get_color_val('#violet');
                template.blue = get_color_val('#blue');
                template.azure = get_color_val('#azure');
                template.cyan = get_color_val('#cyan');
                template.springGreen = get_color_val('#spring-green');
                template.green = get_color_val('#green');
                template.chartreuse = get_color_val('#chartreuse');
                template.yellow = get_color_val('#yellow');
                template.orange = get_color_val('#orange');
                template.orangeGray = get_color_val('#orange-gray');
                template.darkGrayOrange = get_color_val('#dark-gray-orange');
                template.blueGray = get_color_val('#blue-gray');
                template.lightGrayAzure = get_color_val('#light-gray-azure');

                // OBE Single Color Gradient Percentages
                template.tint = get_percent_val('#obeb4-1-color-tint-value');
                template.shade = get_percent_val('#obeb4-1-color-shade-value');

                // OBE Single Color Tint/Shade Percentages
                template.c50 = get_percent_val('#color-50-lighten-percent');
                template.c100 = get_percent_val('#color-100-lighten-percent');
                template.c200 = get_percent_val('#color-200-lighten-percent');
                template.c300 = get_percent_val('#color-300-lighten-percent');
                template.c400 = get_percent_val('#color-400-lighten-percent');
                template.c600 = get_percent_val('#color-600-darken-percent');
                template.c700 = get_percent_val('#color-700-darken-percent');
                template.c800 = get_percent_val('#color-800-darken-percent');
                template.c900 = get_percent_val('#color-900-darken-percent');

                // OBE Font Options
                template.fonts = get_tab_selection();
                
                // OBE Google Fonts Data
                template.gf = encodeURI($('#google-fonts-url').val().replace(/=/g, '__'));
                template.gfp = encodeURI($('#google-font-family-sans-serif').val());
                template.gfm = encodeURI($('#google-font-family-monospace').val());
                template.gfsCheck = get_checkbox_val('#enable-obeb4-secondary-font');
                template.gfs = encodeURI($('#google-font-family-secondary').val());

                // OBE Contextual Color Assignments
                template.primary = $('#primary').val();
                template.primary_ts = $('#primary-modifier').val();
                template.secondary = $('#secondary').val();
                template.secondary_ts = $('#secondary-modifier').val();
                template.success = $('#success').val();
                template.success_ts = $('#success-modifier').val();
                template.info = $('#info').val();
                template.info_ts = $('#info-modifier').val();
                template.warning = $('#warning').val();
                template.warning_ts = $('#warning-modifier').val();
                template.danger = $('#danger').val();
                template.danger_ts = $('#danger-modifier').val();
                template.light = $('#light').val();
                template.light_ts = $('#light-modifier').val();
                template.dark = $('#dark').val();
                template.dark_ts = $('#dark-modifier').val();

                // OBE Additional Color Assignments
                template.body = $('#body-bg').val();
                template.body_ts = $('#body-bg-modifier').val();
                template.color = $('#body-color').val();
                template.color_ts = $('#body-color-modifier').val();

                template.link_color = $('#link-color').val();
                template.link_color_ts = $('#link-color-modifier').val();
                template.link_decor = $('#link-decoration').val();
                //template.link_decor_color = $('#link-decoration-color').val();
                //template.link_decor_color_ts = $('#link-decoration-color-modifier').val();
                template.link_hover_decor = $('#link-hover-decoration').val();
                //template.link_hover_decor_color = $('#link-decoration-color').val();
                //template.link_hover_decor_color_ts = $('#link-decoration-color-modifier').val();

                template.mark = $('#mark-bg').val();
                template.mark_ts = $('#mark-bg-modifier').val();

                template.input_bg = $('#input-bg').val();
                template.input_bg_ts = $('#input-bg-modifier').val();
                template.input_color = $('#input-color').val();
                template.input_color_ts = $('#input-color-modifier').val();
                template.input_placeholder = $('#input-placeholder-color').val();
                template.input_placeholder_ts = $('#input-placeholder-color-modifier').val();
                template.input_disabled_bg = $('#input-disabled-bg').val();
                template.input_disabled_bg_ts = $('#input-disabled-bg-modifier').val();

                template.addon_bg = $('#input-group-addon-bg').val();
                template.addon_bg_ts = $('#input-group-addon-bg-modifier').val();
                template.addon_color = $('#input-group-addon-color').val();
                template.addon_color_ts = $('#input-group-addon-color-modifier').val();

                template.active_bg = $('#component-active-bg').val();
                template.active_bg_ts = $('#component-active-bg-modifier').val();
                template.active_color = $('#component-active-color').val();
                template.active_color_ts = $('#component-active-color-modifier').val();
                
                template.dd_header = $('#dropdown-header-color').val();
                template.dd_header_ts = $('#dropdown-header-color-modifier').val();
                template.dd_link = $('#dropdown-link-color').val();
                template.dd_link_ts = $('#dropdown-link-color-modifier').val();
                template.dd_hover = $('#dropdown-link-hover-bg').val();
                template.dd_hover_ts = $('#dropdown-link-hover-bg-modifier').val();
                template.dd_disabled = $('#dropdown-link-disabled-color').val();
                template.dd_disabled_ts = $('#dropdown-link-disabled-color-modifier').val();




                

                
                

                //console.log(template);

                var generateTemplateURL = function (urlBase, templateObj) {
                    var output = urlBase + '?';
                    for (var key in templateObj) {
                        if (templateObj.hasOwnProperty(key)) {
                            output += key + '=' + templateObj[key] + '&';
                        }
                    }
                    return output.replace(/.$/, "");
                }

                //
                // STRINGIFY OBJECT INTO JSON AND USE PRISM TO DISPLAY AS HIGHLIGHTED CODE
                //

                $('#template-url pre').remove();
                
                var target2 = document.getElementById('template-url');

                var pre2 = document.createElement('pre');
                var code2 = document.createElement('code');
                    code2.className = 'language-markup line-numbers';
                var leURL = generateTemplateURL(url, template);
                var textnode2 = document.createTextNode(leURL);

                code2.appendChild(textnode2);
                pre2.appendChild(code2);
                target2.appendChild(pre2);

                //$('#template-url-test').text(generateTemplateURL(url, template));

                Prism.highlightAll();

                // add class name to target element to use as a selector to hide the code output
                // when a user clicks on any setting elements after generating a JSON output
                $(target).addClass('js-json-is-visible').collapse('show');
                $(target2).addClass('js-json-is-visible').collapse('show');

            });





            
            



            // 
            // GET URL DATA AND APPLY TO PAGE
            //
            
            function get_URL_var(variable) {
                var query = window.location.search.substring(1);
                var vars = query.split("&");
                for (var i=0;i<vars.length;i++) {
                    var pair = vars[i].split("=");
                    if(pair[0] == variable){return pair[1];}
                }
                return(false);
            }

            function set_checkbox(value, idSelector) {
                if (value === '1') {
                    $(idSelector).prop('checked', true);
                } else if (value === '0') {
                    $(idSelector).prop('checked', false);
                }
            }

            function set_input_val(idSelector, value) {
                $(idSelector).val(value);
            }

            function set_select_val(idSelector, value) {
                $(idSelector + " option[value='" + value + "']").attr("selected", true);
            }

            function set_link_decoration_inputs(str, decorSelectId, colorSelectId, modSelectId, targetId) {
                
                // decode passed str value and set assign to a variable
                let string = decodeURI(str);
                // write the string directly to the hidden input
                $(targetId).val(string);
                
                // array of different decoration type options
                let options = ['none', 'underline dotted', 'underline double', 'underline dashed', 'underline wavy', 'underline overline', 'underline', 'overline dotted', 'overline double', 'overline dashed', 'overline wavy', 'overline', 'line-through dotted', 'line-through double', 'line-through dashed', 'line-through wavy', 'line-through'];
                // array of color slugs (without any tint/shade modifiers)
                let colorSlugs = ['red', 'rose', 'magenta', 'violet', 'blue', 'azure', 'cyan', 'spring-green', 'green', 'chartreuse', 'yellow', 'orange', 'dark-gray-orange', 'dark-gray', 'gray', 'blue-gray', 'light-gray-azure', 'light-gray', 'black', 'orange-gray', 'white'];

                // deselect all select options
                $(decorSelectId, decorSelectId, colorSelectId).find('option').attr('selected', false);

                // loop through the array of possible select values
                for (var i = 0; i < options.length; i++) {
                    
                    // if the passed and decoded string is found in the array item
                    if (string.includes(options[i])) {
                        
                        if (options[i] === 'none') {
                            
                            // if 'none' is found then set all selects to none
                            $(decorSelectId, colorSelectId, modSelectId).find('option[value="none"]').attr('selected', true);
                            $(colorSelectId, modSelectId).attr('disabled', true);

                        } else {
                            
                            // if none is not found but the passed string contains a 0
                            if (string.includes('0')) {
                                
                                // get the good stuff
                                let str2 = string;
                                let colorString = str2.split(' ').pop();
                                let modifier = colorString.split("-").pop();
                                let color = colorString.replace('-' + modifier, '');
                                let decoration = string.replace(' ' + colorString, '');
                                // update the UI
                                $(decorSelectId).find('option[value="' + decoration + '"]').attr('selected', true);
                                $(colorSelectId).find('option[value="' + color + '"]').attr('selected', true);
                                $(modSelectId).find('option[value="' + modifier + '"]').attr('selected', true);

                            } else {
                                
                                let decoration = '';
                                let color = '';
                                
                                // since a color value may still exist (without any 0 chars), loop through colors array and extract the color value
                                for (var j = 0; j < colorSlugs.length; j++) {
                                    if (string.includes(colorSlugs[j])) {
                                        // get the good stuff
                                        let str2 = string;
                                        color = str2.split(' ').pop();
                                        // update the UI
                                        $(colorSelectId).find('option[value="' + color + '"]').attr('selected', true);
                                        $(modSelectId).find('option[value="none"]').attr('selected', true);
                                    }/* else {
                                        $(colorSelectId).find('option[value="none"]').attr('selected', true);
                                        $(modSelectId).attr('disabled', true);
                                    }*/
                                }

                                decoration = string.replace(color, '').trim();
                                
                                for (var k = 0; k < options.length; k++) {
                                    
                                    if (options[k] === decoration) {
                                        $(decorSelectId).find('option[value="' + decoration + '"]').attr('selected', true);
                                    }

                                }

                            }

                        }

                    }

                }

                let colorCheck = $(colorSelectId).val();
                
                if (colorCheck === 'none') {
                    $(modSelectId).attr('disabled', true);
                } else {
                    $(targetId).siblings('.collapse').collapse('show');
                }

            }


            
            // OBE Color Options
            if (get_URL_var('a').length > 0) {
                set_checkbox(get_URL_var('a'), '#enable-obeb4-alert-wheel-colors');
            }
            if (get_URL_var('b').length > 0) {
                set_checkbox(get_URL_var('b'), '#enable-obeb4-alert-variations');
            }
            if (get_URL_var('c').length > 0) {
                set_checkbox(get_URL_var('c'), '#enable-obeb4-background-wheel-colors');
            }
            if (get_URL_var('d').length > 0) {
                set_checkbox(get_URL_var('d'), '#enable-obeb4-background-tints-shades');
            }
            if (get_URL_var('e').length > 0) {
                set_checkbox(get_URL_var('e'), '#enable-obeb4-1-color-gradients');
            }
            if (get_URL_var('f').length > 0) {
                set_checkbox(get_URL_var('f'), '#enable-obeb4-2-color-gradients');
            }
            if (get_URL_var('g').length > 0) {
                set_checkbox(get_URL_var('g'), '#enable-obeb4-3-color-gradients');
            }
            if (get_URL_var('h').length > 0) {
                set_checkbox(get_URL_var('h'), '#enable-obeb4-badge-wheel-colors');
            }
            if (get_URL_var('i').length > 0) {
                set_checkbox(get_URL_var('i'), '#enable-obeb4-border-wheel-colors');
            }
            if (get_URL_var('j').length > 0) {
                set_checkbox(get_URL_var('j'), '#enable-obeb4-border-tints-shades');
            }
            if (get_URL_var('k').length > 0) {
                set_checkbox(get_URL_var('k'), '#enable-obeb4-button-wheel-colors');
            }
            if (get_URL_var('l').length > 0) {
                set_checkbox(get_URL_var('l'), '#enable-obeb4-dropdowns');
            }
            if (get_URL_var('m').length > 0) {
                set_checkbox(get_URL_var('m'), '#enable-obeb4-list-groups');
            }
            if (get_URL_var('n').length > 0) {
                set_checkbox(get_URL_var('n'), '#enable-obeb4-tables');
            }
            if (get_URL_var('o').length > 0) {
                set_checkbox(get_URL_var('o'), '#enable-obeb4-text-wheel-colors');
            }
            if (get_URL_var('p').length > 0) {
                set_checkbox(get_URL_var('p'), '#enable-obeb4-text-tints-shades');
            }
            if (get_URL_var('q').length > 0) {
                set_checkbox(get_URL_var('q'), '#enable-obeb4-tooltips');
            }
            if (get_URL_var('r').length > 0) {
                set_checkbox(get_URL_var('r'), '#enable-obeb4-form-element-wheel-colors');
            }
            if (get_URL_var('s').length > 0) {
                set_checkbox(get_URL_var('s'), '#enable-obeb4-popovers');
            }

            
            // OBE Utility Options
            if (get_URL_var('t').length > 0) {
                set_checkbox(get_URL_var('t'), '#enable-obeb4-border-widths');
            }
            if (get_URL_var('u').length > 0) {
                set_checkbox(get_URL_var('u'), '#enable-obeb4-button-sizes');
            }
            if (get_URL_var('v').length > 0) {
                set_checkbox(get_URL_var('v'), '#enable-obeb4-element-sizes');
            }
            if (get_URL_var('w').length > 0) {
                set_checkbox(get_URL_var('w'), '#enable-obeb4-lists');
            }
            if (get_URL_var('x').length > 0) {
                set_checkbox(get_URL_var('x'), '#enable-obeb4-box-shadows');
            }
            if (get_URL_var('y').length > 0) {
                set_checkbox(get_URL_var('y'), '#enable-obeb4-text-shadows');
            }
            if (get_URL_var('z').length > 0) {
                set_checkbox(get_URL_var('z'), '#enable-obeb4-text-sizes');
            }

            if (get_URL_var('aa').length > 0) {
                set_checkbox(get_URL_var('aa'), '#enable-obeb4-responsive-headlines');
            }
            if (get_URL_var('bb').length > 0) {
                set_checkbox(get_URL_var('bb'), '#enable-obeb4-modal-utilities');
            }
            if (get_URL_var('cc').length > 0) {
                set_checkbox(get_URL_var('cc'), '#enable-obeb4-material-design-forms');
            }
            if (get_URL_var('dd').length > 0) {
                set_checkbox(get_URL_var('dd'), '#enable-obeb4-opacity');
            }


            if (get_URL_var('ee').length > 0) {
                set_checkbox(get_URL_var('ee'), '#enable-obeb4-custom-dropdown-selects');
            }
            if (get_URL_var('ff').length > 0) {
                set_checkbox(get_URL_var('ff'), '#enable-obeb4-fab-buttons');
            }
            if (get_URL_var('gg').length > 0) {
                set_checkbox(get_URL_var('gg'), '#enable-obeb4-fa5-icon-checkboxes');
            }
            if (get_URL_var('hh').length > 0) {
                set_checkbox(get_URL_var('hh'), '#enable-obeb4-off-canvas-nav-modals');
            }
            if (get_URL_var('ii').length > 0) {
                set_checkbox(get_URL_var('ii'), '#enable-obeb4-spacing-utilities');
            }
            if (get_URL_var('jj').length > 0) {
                set_checkbox(get_URL_var('jj'), '#enable-obeb4-datepicker-component');
            }
            if (get_URL_var('kk').length > 0) {
                set_checkbox(get_URL_var('kk'), '#enable-obeb4-toggle-text-mini-plugin');
            }
            




            
            // OBE Color Wheel Colors
            if (get_URL_var('white').length > 0) {
                set_input_val('#white', decodeURIComponent(get_URL_var('white')));
            }
            if (get_URL_var('lightGray').length > 0) {
                set_input_val('#light-gray', decodeURIComponent(get_URL_var('lightGray')));
            }
            if (get_URL_var('gray').length > 0) {
                set_input_val('#gray', decodeURIComponent(get_URL_var('gray')));
            }
            if (get_URL_var('darkGray').length > 0) {
                set_input_val('#dark-gray', decodeURIComponent(get_URL_var('darkGray')));
            }
            if (get_URL_var('black').length > 0) {
                set_input_val('#black', decodeURIComponent(get_URL_var('black')));
            }
            if (get_URL_var('red').length > 0) {
                set_input_val('#red', decodeURIComponent(get_URL_var('red')));
            }
            if (get_URL_var('rose').length > 0) {
                set_input_val('#rose', decodeURIComponent(get_URL_var('rose')));
            }
            if (get_URL_var('magenta').length > 0) {
                set_input_val('#magenta', decodeURIComponent(get_URL_var('magenta')));
            }
            if (get_URL_var('violet').length > 0) {
                set_input_val('#violet', decodeURIComponent(get_URL_var('violet')));
            }
            if (get_URL_var('blue').length > 0) {
                set_input_val('#blue', decodeURIComponent(get_URL_var('blue')));
            }
            if (get_URL_var('azure').length > 0) {
                set_input_val('#azure', decodeURIComponent(get_URL_var('azure')));
            }
            if (get_URL_var('cyan').length > 0) {
                set_input_val('#cyan', decodeURIComponent(get_URL_var('cyan')));
            }
            if (get_URL_var('springGreen').length > 0) {
                set_input_val('#spring-green', decodeURIComponent(get_URL_var('springGreen')));
            }
            if (get_URL_var('green').length > 0) {
                set_input_val('#green', decodeURIComponent(get_URL_var('green')));
            }
            if (get_URL_var('chartreuse').length > 0) {
                set_input_val('#chartreuse', decodeURIComponent(get_URL_var('chartreuse')));
            }
            if (get_URL_var('yellow').length > 0) {
                set_input_val('#yellow', decodeURIComponent(get_URL_var('yellow')));
            }
            if (get_URL_var('orange').length > 0) {
                set_input_val('#orange', decodeURIComponent(get_URL_var('orange')));
            }
            if (get_URL_var('orangeGray').length > 0) {
                set_input_val('#orange-gray', decodeURIComponent(get_URL_var('orangeGray')));
            }
            if (get_URL_var('darkGrayOrange').length > 0) {
                set_input_val('#dark-gray-orange', decodeURIComponent(get_URL_var('darkGrayOrange')));
            }
            if (get_URL_var('blueGray').length > 0) {
                set_input_val('#blue-gray', decodeURIComponent(get_URL_var('blueGray')));
            }
            if (get_URL_var('lightGrayAzure').length > 0) {
                set_input_val('#light-gray-azure', decodeURIComponent(get_URL_var('lightGrayAzure')));
            }


            // OBE Single Color Gradient Percentages
            if (get_URL_var('tint').length > 0) {
                set_input_val('#tint', decodeURIComponent(get_URL_var('tint')));
            }
            if (get_URL_var('shade').length > 0) {
                set_input_val('#shade', decodeURIComponent(get_URL_var('shade')));
            }


            // OBE Single Color Tint/Shade Percentages
            if (get_URL_var('c50').length > 0) {
                set_input_val('#color-50-lighten-percent', decodeURIComponent(get_URL_var('c50')));
            }
            if (get_URL_var('c100').length > 0) {
                set_input_val('#color-100-lighten-percent', decodeURIComponent(get_URL_var('c100')));
            }
            if (get_URL_var('c200').length > 0) {
                set_input_val('#color-200-lighten-percent', decodeURIComponent(get_URL_var('c200')));
            }
            if (get_URL_var('c300').length > 0) {
                set_input_val('#color-300-lighten-percent', decodeURIComponent(get_URL_var('c300')));
            }
            if (get_URL_var('c400').length > 0) {
                set_input_val('#color-400-lighten-percent', decodeURIComponent(get_URL_var('c400')));
            }
            if (get_URL_var('c600').length > 0) {
                set_input_val('#color-600-darken-percent', decodeURIComponent(get_URL_var('c600')));
            }
            if (get_URL_var('c700').length > 0) {
                set_input_val('#color-700-darken-percent', decodeURIComponent(get_URL_var('c700')));
            }
            if (get_URL_var('c800').length > 0) {
                set_input_val('#color-800-darken-percent', decodeURIComponent(get_URL_var('c800')));
            }
            if (get_URL_var('c900').length > 0) {
                set_input_val('#color-900-darken-percent', decodeURIComponent(get_URL_var('c900')));
            }

            
            // OBE Font Options
            if (get_URL_var('fonts') === 'bootstrap') {
                $('#bootstrap-tab').tab('show');
            } else if (get_URL_var('fonts') === 'bootstrap') {
                $('#google-fonts-tab').tab('show');
            }


            
            // OBE Google Fonts Data
            if (get_URL_var('gf').length > 0) {
                set_input_val('#google-fonts-url', decodeURIComponent(get_URL_var('gf').replace(/__/g, '=')));
            }
            if (get_URL_var('gfp').length > 0) {
                set_input_val('#google-font-family-sans-serif', decodeURIComponent(get_URL_var('gfp')));
            }
            if (get_URL_var('gfm').length > 0) {
                set_input_val('#google-font-family-monospace', decodeURIComponent(get_URL_var('gfm')));
            }
            if (get_URL_var('gfsCheck').length > 0) {
                set_checkbox(get_URL_var('gfsCheck'), '#enable-obeb4-secondary-font');
            }
            if (get_URL_var('gfs').length > 0) {
                set_input_val('#google-font-family-secondary', decodeURIComponent(get_URL_var('gfs')));
            }


            // OBE Contextual Color Assignments
            if (get_URL_var('primary').length > 0) {
                set_select_val('#primary', get_URL_var('primary'));
            }
            if (get_URL_var('primary-modifier').length > 0) {
                set_select_val('#primary-modifier', get_URL_var('primary_ts'));
            }
            if (get_URL_var('secondary').length > 0) {
                set_select_val('#secondary', get_URL_var('secondary'));
            }
            if (get_URL_var('secondary-modifier').length > 0) {
                set_select_val('#secondary-modifier', get_URL_var('secondary_ts'));
            }
            if (get_URL_var('success').length > 0) {
                set_select_val('#success', get_URL_var('success'));
            }
            if (get_URL_var('success-modifier').length > 0) {
                set_select_val('#success-modifier', get_URL_var('success_ts'));
            }
            if (get_URL_var('info').length > 0) {
                set_select_val('#info', get_URL_var('info'));
            }
            if (get_URL_var('info-modifier').length > 0) {
                set_select_val('#info-modifier', get_URL_var('info_ts'));
            }
            if (get_URL_var('warning').length > 0) {
                set_select_val('#warning', get_URL_var('warning'));
            }
            if (get_URL_var('warning-modifier').length > 0) {
                set_select_val('#warning-modifier', get_URL_var('warning_ts'));
            }
            if (get_URL_var('danger').length > 0) {
                set_select_val('#danger', get_URL_var('danger'));
            }
            if (get_URL_var('danger-modifier').length > 0) {
                set_select_val('#danger-modifier', get_URL_var('danger_ts'));
            }
            if (get_URL_var('light').length > 0) {
                set_select_val('#light', get_URL_var('light'));
            }
            if (get_URL_var('light-modifier').length > 0) {
                set_select_val('#light-modifier', get_URL_var('light_ts'));
            }
            if (get_URL_var('dark').length > 0) {
                set_select_val('#dark', get_URL_var('dark'));
            }
            if (get_URL_var('dark-modifier').length > 0) {
                set_select_val('#dark-modifier', get_URL_var('dark_ts'));
            }
            

            // OBE Additional Color Assignments
            if (get_URL_var('body').length > 0) {
                set_select_val('#body-bg', get_URL_var('body'));
            }
            if (get_URL_var('body_ts').length > 0) {
                set_select_val('#body-bg-modifier', get_URL_var('body_ts'));
            }
            if (get_URL_var('color').length > 0) {
                set_select_val('#body-color', get_URL_var('color'));
            }
            if (get_URL_var('color_ts').length > 0) {
                set_select_val('#body-color-modifier', get_URL_var('color_ts'));
            }



            
            if (get_URL_var('link_color').length > 0) {
                set_select_val('#link-color', get_URL_var('link_color'));
            }
            if (get_URL_var('link_color_ts').length > 0) {
                set_select_val('#link-color-modifier', get_URL_var('link_color_ts'));
            }
            if (get_URL_var('link_decor').length > 0) {
                set_link_decoration_inputs(get_URL_var('link_decor'), '#link-decoration-type', '#link-decoration-color', '#link-decoration-color-modifier', '#link-decoration')
            }
            if (get_URL_var('link_hover_decor').length > 0) {
                set_link_decoration_inputs(get_URL_var('link_hover_decor'), '#link-hover-decoration-type', '#link-hover-decoration-color', '#link-hover-decoration-color-modifier', '#link-hover-decoration')
            }




            if (get_URL_var('mark').length > 0) {
                set_select_val('#mark-bg', get_URL_var('mark'));
            }
            if (get_URL_var('mark_ts').length > 0) {
                set_select_val('#mark-bg-modifier', get_URL_var('mark_ts'));
            }


            if (get_URL_var('input_bg').length > 0) {
                set_select_val('#input-bg', get_URL_var('input_bg'));
            }
            if (get_URL_var('input_bg_ts').length > 0) {
                set_select_val('#input-bg-modifier', get_URL_var('input_bg_ts'));
            }
            if (get_URL_var('input_color').length > 0) {
                set_select_val('#input-color', get_URL_var('input_color'));
            }
            if (get_URL_var('input_color_ts').length > 0) {
                set_select_val('#input-color-modifier', get_URL_var('input_color_ts'));
            }
            if (get_URL_var('input_placeholder').length > 0) {
                set_select_val('#input-placeholder-color', get_URL_var('input_placeholder'));
            }
            if (get_URL_var('input_placeholder_ts').length > 0) {
                set_select_val('#input-placeholder-color-modifier', get_URL_var('input_placeholder_ts'));
            }
            if (get_URL_var('input_disabled_bg').length > 0) {
                set_select_val('#input-disabled-bg', get_URL_var('input_disabled_bg'));
            }
            if (get_URL_var('input_disabled_bg_ts').length > 0) {
                set_select_val('#input-disabled-bg-modifier', get_URL_var('input_disabled_bg_ts'));
            }


            if (get_URL_var('addon_bg').length > 0) {
                set_select_val('#input-group-addon-bg', get_URL_var('addon_bg'));
            }
            if (get_URL_var('addon_bg_ts').length > 0) {
                set_select_val('#input-group-addon-bg-modifier', get_URL_var('addon_bg_ts'));
            }
            if (get_URL_var('addon_color').length > 0) {
                set_select_val('#input-group-addon-color', get_URL_var('addon_color'));
            }
            if (get_URL_var('addon_color_ts').length > 0) {
                set_select_val('#input-group-addon-color-modifier', get_URL_var('addon_color_ts'));
            }


            if (get_URL_var('active_bg').length > 0) {
                set_select_val('#component-active-bg', get_URL_var('active_bg'));
            }
            if (get_URL_var('active_bg_ts').length > 0) {
                set_select_val('#component-active-bg-modifier', get_URL_var('active_bg_ts'));
            }
            if (get_URL_var('active_color').length > 0) {
                set_select_val('#component-active-color', get_URL_var('active_color'));
            }
            if (get_URL_var('active_color_ts').length > 0) {
                set_select_val('#component-active-color-modifier', get_URL_var('active_color_ts'));
            }
            
            
            if (get_URL_var('dd_header').length > 0) {
                set_select_val('#dropdown-header-color', get_URL_var('dd_header'));
            }
            if (get_URL_var('dd_header_ts').length > 0) {
                set_select_val('#dropdown-header-color-modifier', get_URL_var('dd_header_ts'));
            }
            if (get_URL_var('dd_link').length > 0) {
                set_select_val('#dropdown-link-color', get_URL_var('dd_link'));
            }
            if (get_URL_var('dd_link_ts').length > 0) {
                set_select_val('#dropdown-link-color-modifier', get_URL_var('dd_link_ts'));
            }
            if (get_URL_var('dd_hover').length > 0) {
                set_select_val('#dropdown-link-hover-bg', get_URL_var('dd_hover'));
            }
            if (get_URL_var('dd_hover_ts').length > 0) {
                set_select_val('#dropdown-link-hover-bg-modifier', get_URL_var('dd_hover_ts'));
            }
            if (get_URL_var('dd_disabled').length > 0) {
                set_select_val('#dropdown-link-disabled-color', get_URL_var('dd_disabled'));
            }
            if (get_URL_var('dd_disabled_ts').length > 0) {
                set_select_val('#dropdown-link-disabled-color-modifier', get_URL_var('dd_disabled_ts'));
            }
            

            
            




            
            
            

            $('#template-selector').on('change', function() {
                var link = $(this).val();
                window.location.href = link;
            });
















			// SVG JAVASCRIPT
			
			var svgColors = ['red', 'rose', 'magenta', 'violet', 'blue', 'azure', 'cyan', 'spring-green', 'green', 'chartreuse', 'yellow', 'orange', 'dark-gray-orange', 'dark-gray', 'gray', 'blue-gray', 'light-gray-azure', 'light-gray', 'black', 'orange-gray', 'white'];
			
			// Set the default color
			var defaultFill = "#b3aeab";

            // set the classes needed to toggle visibility when the svg is used as a UI
            $('.js-color-wheel-inputs').find('.form-group').addClass('collapse show');
			
			// Loop through each svg part by id
			for (i = 0; i < svgColors.length; i++) { 
				// Make each each part of the color wheel the default color
				$("#" + svgColors[i] + "-slice").attr('style', "fill:" + defaultFill);
			}
			
			// Add on click functionality to each part of the color wheel
			for (i = 0; i < svgColors.length; i++) { 
				
				// Set on hover functionality for each piece of the wheel
				$("#" + svgColors[i] + "-slice").hover(function() {
					$(this).css('cursor','pointer');
				});
				
				// Set on click functionality for each piece of the wheel
				$("#" + svgColors[i] + "-slice").on( "click", function() {
					
					// Remove visual cue from every svg path first
					for (j = 0; j < svgColors.length; j++) {
						$("#" + svgColors[j] + "-slice").attr('opacity', "0.25");
					}
					
					// Then add visual cue to the selected svg path
					$(this).attr('opacity', "1");
					
					// Remove any existing color form input elements from view
					$('.js-color-wheel-inputs').find('.form-group').removeClass('show');
					
					// Display the input for the wheel item clicked
					var tempId = this.id;
                    var targetId = tempId.replace('-slice', '');
                    $('#' + targetId).parents('.form-group').collapse('show');
					
					// get window width
					var windowWidth = window.innerWidth;
					//console.log('windowWidth: ' + windowWidth);
					// if window is less pixels wide than bootstraps medium size breakpoint minus 1
					if (windowWidth <= 991) {
						// Scroll to appropriate input
						$('html, body').animate({
							scrollTop: $('#' + this.id + '-input').offset().top - 100
						}, 500);
					}
					
					// focus the input related to the clicked svg path
					//$('#' + this.id + '-input').focus();
					
				});
				
			}

			// utility function to deselect any selected svg elements
			// and return the view state to normal opacity
			var deselectSvg = function () {
				for (i = 0; i < svgColors.length; i++) {
					$("#" + svgColors[i] + "-slice").attr('opacity', "1");
				}
			}

            // listener to trigger the deselectSvg function when a UI button is clicked
            // and to show all hex color inputs upon the same click
            $('#view-all-slices').on( "click", function() {
                deselectSvg();
                $('.js-color-wheel-inputs').find('.form-group').addClass('show');
            });

            // script to add colors to wheel svg on page load
			for (i = 0; i < svgColors.length; i++) { 
                let colorVal = $('#' + svgColors[i]).val();
                $("#" + svgColors[i] + "-slice").attr('style', "fill:" + colorVal);
			}

            // script to add event listener to each color input
            // where upon an input value change event
            // the wheel svg is updated with that color change
            /*for (i = 0; i < svgColors.length; i++) { 
                $('#' + svgColors[i]).on( "change", function() {
                    let newColorVal = $(this).val();
                    $("#" + svgColors[i] + "-slice").attr('style', "fill:" + newColorVal);
                });
			}*/











        });

    </script>

{% endblock %}